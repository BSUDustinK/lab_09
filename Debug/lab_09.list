
lab_09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004410  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004598  08004598  00005598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a8  080045a8  0000603c  2**0
                  CONTENTS
  4 .ARM          00000008  080045a8  080045a8  000055a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045b0  080045b0  0000603c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b0  080045b0  000055b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045b4  080045b4  000055b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  080045b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000603c  2**0
                  CONTENTS
 10 .bss          00000448  2000003c  2000003c  0000603c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000484  20000484  0000603c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010633  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000268f  00000000  00000000  0001669f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00018d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aeb  00000000  00000000  00019b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022087  00000000  00000000  0001a65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011179  00000000  00000000  0003c6e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1ad0  00000000  00000000  0004d85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f32b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c38  00000000  00000000  0011f370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00122fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004580 	.word	0x08004580

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08004580 	.word	0x08004580

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fbc7 	bl	8000c50 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f901 	bl	80006c8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f99f 	bl	8000808 <MX_GPIO_Init>
  MX_TIM7_Init();
 80004ca:	f000 f967 	bl	800079c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /*** Configure GPIOs ***/
  GPIOD->MODER = 0x55555555; // set all Port D pins to outputs
 80004ce:	4b73      	ldr	r3, [pc, #460]	@ (800069c <main+0x1e4>)
 80004d0:	f04f 3255 	mov.w	r2, #1431655765	@ 0x55555555
 80004d4:	601a      	str	r2, [r3, #0]

  // Port A mode register - makes A0 to A3 analog pins
  GPIOA->MODER = 0x000000ff;
 80004d6:	4b72      	ldr	r3, [pc, #456]	@ (80006a0 <main+0x1e8>)
 80004d8:	22ff      	movs	r2, #255	@ 0xff
 80004da:	601a      	str	r2, [r3, #0]

  GPIOE->MODER |= 0x55555555; // Port E mode register - make E8 to E15 outputs
 80004dc:	4b71      	ldr	r3, [pc, #452]	@ (80006a4 <main+0x1ec>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a70      	ldr	r2, [pc, #448]	@ (80006a4 <main+0x1ec>)
 80004e2:	f043 3355 	orr.w	r3, r3, #1431655765	@ 0x55555555
 80004e6:	6013      	str	r3, [r2, #0]

  /*** Configure ADC1 ***/
  RCC->APB2ENR |= 0x1 << 8;// Turns on ADC1 clock by forcing bit 8 of the RCC APB2ENR register to 1 while keeping other bits unchanged
 80004e8:	4b6f      	ldr	r3, [pc, #444]	@ (80006a8 <main+0x1f0>)
 80004ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004ec:	4a6e      	ldr	r2, [pc, #440]	@ (80006a8 <main+0x1f0>)
 80004ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004f2:	6453      	str	r3, [r2, #68]	@ 0x44

  ADC1->CR2 |= 0x1;// Turns on ADC1 by forcing bit 0 OF CR2 to 1 while keeping other bits unchanged
 80004f4:	4b6d      	ldr	r3, [pc, #436]	@ (80006ac <main+0x1f4>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	4a6c      	ldr	r2, [pc, #432]	@ (80006ac <main+0x1f4>)
 80004fa:	f043 0301 	orr.w	r3, r3, #1
 80004fe:	6093      	str	r3, [r2, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int analog_value, volts, volts_tenths, volts_hundredths, raw_1000, raw_100, raw_10, raw_1;

  Seven_Segment(0x15EEADC1 ); //Message for showing that the initial project compiles and runs
 8000500:	486b      	ldr	r0, [pc, #428]	@ (80006b0 <main+0x1f8>)
 8000502:	f000 fab5 	bl	8000a70 <Seven_Segment>
  HAL_Delay(2000);
 8000506:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800050a:	f000 fc13 	bl	8000d34 <HAL_Delay>
  {
	  /************************************************
	   *  Part 1 Display Light Sensor Volts on 7seg ***
	   ************************************************/

		  ADC1->SQR3 = 1; // select ADC channel 0, change to ADC channel 1 for potentiometer
 800050e:	4b67      	ldr	r3, [pc, #412]	@ (80006ac <main+0x1f4>)
 8000510:	2201      	movs	r2, #1
 8000512:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_Delay(1);
 8000514:	2001      	movs	r0, #1
 8000516:	f000 fc0d 	bl	8000d34 <HAL_Delay>
		  ADC1->CR2 |= 1<<30; // Start a conversion on ADC1 by forcing bit 30 in CR2 to 1 while keeping other bits unchanged
 800051a:	4b64      	ldr	r3, [pc, #400]	@ (80006ac <main+0x1f4>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	4a63      	ldr	r2, [pc, #396]	@ (80006ac <main+0x1f4>)
 8000520:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000524:	6093      	str	r3, [r2, #8]


		  HAL_Delay(1);
 8000526:	2001      	movs	r0, #1
 8000528:	f000 fc04 	bl	8000d34 <HAL_Delay>
		  if (ADC1->SR & 1<<1) // check for conversion completed
 800052c:	4b5f      	ldr	r3, [pc, #380]	@ (80006ac <main+0x1f4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f003 0302 	and.w	r3, r3, #2
 8000534:	2b00      	cmp	r3, #0
 8000536:	d0ea      	beq.n	800050e <main+0x56>
		  	  	  {
			  	  	/**** DISPLAY VOLTS 1'S DIGIT ON DISPLAY 7 ****/
			  	  	analog_value = ADC1->DR;// & 0x0FF0;
 8000538:	4b5c      	ldr	r3, [pc, #368]	@ (80006ac <main+0x1f4>)
 800053a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053c:	61fb      	str	r3, [r7, #28]
		  		  	volts = ((3*analog_value)/4095);
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	4a5c      	ldr	r2, [pc, #368]	@ (80006b4 <main+0x1fc>)
 8000542:	fb82 1203 	smull	r1, r2, r2, r3
 8000546:	441a      	add	r2, r3
 8000548:	1292      	asrs	r2, r2, #10
 800054a:	17db      	asrs	r3, r3, #31
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	61bb      	str	r3, [r7, #24]
		  		  	Seven_Segment_Digit(7,volts,0);
 8000550:	2200      	movs	r2, #0
 8000552:	69b9      	ldr	r1, [r7, #24]
 8000554:	2007      	movs	r0, #7
 8000556:	f000 fa5b 	bl	8000a10 <Seven_Segment_Digit>

		  		  	/**** DISPLAY VOLTS 1/10TH'S DIGIT ON DISPLAY 6 ****/
		  		  	volts_tenths = (30*analog_value/4095)%10;
 800055a:	69fa      	ldr	r2, [r7, #28]
 800055c:	4613      	mov	r3, r2
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	1a9b      	subs	r3, r3, r2
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	4a54      	ldr	r2, [pc, #336]	@ (80006b8 <main+0x200>)
 8000566:	fb82 1203 	smull	r1, r2, r2, r3
 800056a:	441a      	add	r2, r3
 800056c:	12d2      	asrs	r2, r2, #11
 800056e:	17db      	asrs	r3, r3, #31
 8000570:	1ad2      	subs	r2, r2, r3
 8000572:	4b52      	ldr	r3, [pc, #328]	@ (80006bc <main+0x204>)
 8000574:	fb83 1302 	smull	r1, r3, r3, r2
 8000578:	1099      	asrs	r1, r3, #2
 800057a:	17d3      	asrs	r3, r2, #31
 800057c:	1ac9      	subs	r1, r1, r3
 800057e:	460b      	mov	r3, r1
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	440b      	add	r3, r1
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	617b      	str	r3, [r7, #20]
		  		  	Seven_Segment_Digit(6,volts_tenths,0);
 800058a:	2200      	movs	r2, #0
 800058c:	6979      	ldr	r1, [r7, #20]
 800058e:	2006      	movs	r0, #6
 8000590:	f000 fa3e 	bl	8000a10 <Seven_Segment_Digit>

		  		  	/**** DISPLAY VOLTS 1/100TH'S DIGIT ON DISPLAY 5 ****/
		  		    volts_hundredths = (300*analog_value/4095)%10; // 1/100TH'S PLACE
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800059a:	fb02 f303 	mul.w	r3, r2, r3
 800059e:	4a46      	ldr	r2, [pc, #280]	@ (80006b8 <main+0x200>)
 80005a0:	fb82 1203 	smull	r1, r2, r2, r3
 80005a4:	441a      	add	r2, r3
 80005a6:	12d2      	asrs	r2, r2, #11
 80005a8:	17db      	asrs	r3, r3, #31
 80005aa:	1ad2      	subs	r2, r2, r3
 80005ac:	4b43      	ldr	r3, [pc, #268]	@ (80006bc <main+0x204>)
 80005ae:	fb83 1302 	smull	r1, r3, r3, r2
 80005b2:	1099      	asrs	r1, r3, #2
 80005b4:	17d3      	asrs	r3, r2, #31
 80005b6:	1ac9      	subs	r1, r1, r3
 80005b8:	460b      	mov	r3, r1
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	440b      	add	r3, r1
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	613b      	str	r3, [r7, #16]
		  		    Seven_Segment_Digit(5,volts_hundredths,0); //Digit 5
 80005c4:	2200      	movs	r2, #0
 80005c6:	6939      	ldr	r1, [r7, #16]
 80005c8:	2005      	movs	r0, #5
 80005ca:	f000 fa21 	bl	8000a10 <Seven_Segment_Digit>

		  		  	/**** SET DISPLAY 4 TO ZERO ****/
		  		  	Seven_Segment_Digit(4,0,0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	2004      	movs	r0, #4
 80005d4:	f000 fa1c 	bl	8000a10 <Seven_Segment_Digit>

		  		  	/**** DISPLAY 1000THS PLACE OF RAW DECIMAL ON DISPLAY 3 ****/
		  		  	raw_1000 = (analog_value/1000)%10; // 1/1000TH'S PLACE
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	4a39      	ldr	r2, [pc, #228]	@ (80006c0 <main+0x208>)
 80005dc:	fb82 1203 	smull	r1, r2, r2, r3
 80005e0:	1192      	asrs	r2, r2, #6
 80005e2:	17db      	asrs	r3, r3, #31
 80005e4:	1ad2      	subs	r2, r2, r3
 80005e6:	4b35      	ldr	r3, [pc, #212]	@ (80006bc <main+0x204>)
 80005e8:	fb83 1302 	smull	r1, r3, r3, r2
 80005ec:	1099      	asrs	r1, r3, #2
 80005ee:	17d3      	asrs	r3, r2, #31
 80005f0:	1ac9      	subs	r1, r1, r3
 80005f2:	460b      	mov	r3, r1
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	440b      	add	r3, r1
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	60fb      	str	r3, [r7, #12]
		  		  	Seven_Segment_Digit(3,raw_1000,0); //Digit 3
 80005fe:	2200      	movs	r2, #0
 8000600:	68f9      	ldr	r1, [r7, #12]
 8000602:	2003      	movs	r0, #3
 8000604:	f000 fa04 	bl	8000a10 <Seven_Segment_Digit>


		  		  	/**** DISPLAY 100THS PLACE OF RAW DECIMAL ON DISPLAY 2 ****/
		  		  	raw_100 = (analog_value/100)%10;
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	4a2e      	ldr	r2, [pc, #184]	@ (80006c4 <main+0x20c>)
 800060c:	fb82 1203 	smull	r1, r2, r2, r3
 8000610:	1152      	asrs	r2, r2, #5
 8000612:	17db      	asrs	r3, r3, #31
 8000614:	1ad2      	subs	r2, r2, r3
 8000616:	4b29      	ldr	r3, [pc, #164]	@ (80006bc <main+0x204>)
 8000618:	fb83 1302 	smull	r1, r3, r3, r2
 800061c:	1099      	asrs	r1, r3, #2
 800061e:	17d3      	asrs	r3, r2, #31
 8000620:	1ac9      	subs	r1, r1, r3
 8000622:	460b      	mov	r3, r1
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	440b      	add	r3, r1
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	60bb      	str	r3, [r7, #8]
		  		  	Seven_Segment_Digit(2,raw_100,0);
 800062e:	2200      	movs	r2, #0
 8000630:	68b9      	ldr	r1, [r7, #8]
 8000632:	2002      	movs	r0, #2
 8000634:	f000 f9ec 	bl	8000a10 <Seven_Segment_Digit>

		  		  	/**** DISPLAY 10THS PLACE OF RAW DECIMAL ON DISPLAY 1 ****/
		  		  	raw_10 = (analog_value/10)%10;
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	4a20      	ldr	r2, [pc, #128]	@ (80006bc <main+0x204>)
 800063c:	fb82 1203 	smull	r1, r2, r2, r3
 8000640:	1092      	asrs	r2, r2, #2
 8000642:	17db      	asrs	r3, r3, #31
 8000644:	1ad2      	subs	r2, r2, r3
 8000646:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <main+0x204>)
 8000648:	fb83 1302 	smull	r1, r3, r3, r2
 800064c:	1099      	asrs	r1, r3, #2
 800064e:	17d3      	asrs	r3, r2, #31
 8000650:	1ac9      	subs	r1, r1, r3
 8000652:	460b      	mov	r3, r1
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	440b      	add	r3, r1
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	607b      	str	r3, [r7, #4]
		  		  	Seven_Segment_Digit(1,raw_10,0);
 800065e:	2200      	movs	r2, #0
 8000660:	6879      	ldr	r1, [r7, #4]
 8000662:	2001      	movs	r0, #1
 8000664:	f000 f9d4 	bl	8000a10 <Seven_Segment_Digit>


		  		  	/**** DISPLAY 1'S PLACE OF RAW DECIMAL ON DISPLAY 0 ****/
		  		  	raw_1 = analog_value%10;
 8000668:	69fa      	ldr	r2, [r7, #28]
 800066a:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <main+0x204>)
 800066c:	fb83 1302 	smull	r1, r3, r3, r2
 8000670:	1099      	asrs	r1, r3, #2
 8000672:	17d3      	asrs	r3, r2, #31
 8000674:	1ac9      	subs	r1, r1, r3
 8000676:	460b      	mov	r3, r1
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	440b      	add	r3, r1
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	603b      	str	r3, [r7, #0]
		  		  	Seven_Segment_Digit(0,raw_1,0);
 8000682:	2200      	movs	r2, #0
 8000684:	6839      	ldr	r1, [r7, #0]
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f9c2 	bl	8000a10 <Seven_Segment_Digit>

		  		  	/**** DISPLAY BINARY VALUE OF SAMPLE ON LEDS ****/
		  		  	GPIOD->ODR = analog_value;
 800068c:	4a03      	ldr	r2, [pc, #12]	@ (800069c <main+0x1e4>)
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	6153      	str	r3, [r2, #20]

		  		  	HAL_Delay(100);
 8000692:	2064      	movs	r0, #100	@ 0x64
 8000694:	f000 fb4e 	bl	8000d34 <HAL_Delay>
		  ADC1->SQR3 = 1; // select ADC channel 0, change to ADC channel 1 for potentiometer
 8000698:	e739      	b.n	800050e <main+0x56>
 800069a:	bf00      	nop
 800069c:	40020c00 	.word	0x40020c00
 80006a0:	40020000 	.word	0x40020000
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40012000 	.word	0x40012000
 80006b0:	15eeadc1 	.word	0x15eeadc1
 80006b4:	c00c00c1 	.word	0xc00c00c1
 80006b8:	80080081 	.word	0x80080081
 80006bc:	66666667 	.word	0x66666667
 80006c0:	10624dd3 	.word	0x10624dd3
 80006c4:	51eb851f 	.word	0x51eb851f

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	@ 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 ff26 	bl	8004528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	@ (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	@ (8000798 <SystemClock_Config+0xd0>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000724:	2301      	movs	r3, #1
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000728:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800072c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000732:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000738:	2308      	movs	r3, #8
 800073a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800073c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000740:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000742:	2302      	movs	r3, #2
 8000744:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000746:	2307      	movs	r3, #7
 8000748:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fb82 	bl	8002e58 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800075a:	f000 f953 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800076e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000774:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2105      	movs	r1, #5
 800077c:	4618      	mov	r0, r3
 800077e:	f002 fde3 	bl	8003348 <HAL_RCC_ClockConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000788:	f000 f93c 	bl	8000a04 <Error_Handler>
  }
}
 800078c:	bf00      	nop
 800078e:	3750      	adds	r7, #80	@ 0x50
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <MX_TIM7_Init+0x64>)
 80007ac:	4a15      	ldr	r2, [pc, #84]	@ (8000804 <MX_TIM7_Init+0x68>)
 80007ae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80007b0:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_TIM7_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_TIM7_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80007bc:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_TIM7_Init+0x64>)
 80007be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007c2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_TIM7_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007ca:	480d      	ldr	r0, [pc, #52]	@ (8000800 <MX_TIM7_Init+0x64>)
 80007cc:	f002 ffa8 	bl	8003720 <HAL_TIM_Base_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80007d6:	f000 f915 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007e2:	463b      	mov	r3, r7
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	@ (8000800 <MX_TIM7_Init+0x64>)
 80007e8:	f003 f9b8 	bl	8003b5c <HAL_TIMEx_MasterConfigSynchronization>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80007f2:	f000 f907 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000058 	.word	0x20000058
 8000804:	40001400 	.word	0x40001400

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	@ 0x30
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	4b72      	ldr	r3, [pc, #456]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a71      	ldr	r2, [pc, #452]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000828:	f043 0310 	orr.w	r3, r3, #16
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b6f      	ldr	r3, [pc, #444]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0310 	and.w	r3, r3, #16
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	4b6b      	ldr	r3, [pc, #428]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a6a      	ldr	r2, [pc, #424]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b68      	ldr	r3, [pc, #416]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b64      	ldr	r3, [pc, #400]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a63      	ldr	r2, [pc, #396]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b61      	ldr	r3, [pc, #388]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b5d      	ldr	r3, [pc, #372]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a5c      	ldr	r2, [pc, #368]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b5a      	ldr	r3, [pc, #360]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	4b56      	ldr	r3, [pc, #344]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a55      	ldr	r2, [pc, #340]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b53      	ldr	r3, [pc, #332]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b4f      	ldr	r3, [pc, #316]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a4e      	ldr	r2, [pc, #312]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b4c      	ldr	r3, [pc, #304]	@ (80009ec <MX_GPIO_Init+0x1e4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2108      	movs	r1, #8
 80008ca:	4849      	ldr	r0, [pc, #292]	@ (80009f0 <MX_GPIO_Init+0x1e8>)
 80008cc:	f000 fd04 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	4847      	ldr	r0, [pc, #284]	@ (80009f4 <MX_GPIO_Init+0x1ec>)
 80008d6:	f000 fcff 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008da:	2200      	movs	r2, #0
 80008dc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008e0:	4845      	ldr	r0, [pc, #276]	@ (80009f8 <MX_GPIO_Init+0x1f0>)
 80008e2:	f000 fcf9 	bl	80012d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008e6:	2308      	movs	r3, #8
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	483c      	ldr	r0, [pc, #240]	@ (80009f0 <MX_GPIO_Init+0x1e8>)
 80008fe:	f000 fb4f 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000902:	2301      	movs	r3, #1
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4836      	ldr	r0, [pc, #216]	@ (80009f4 <MX_GPIO_Init+0x1ec>)
 800091a:	f000 fb41 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800091e:	2308      	movs	r3, #8
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092e:	2305      	movs	r3, #5
 8000930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	482e      	ldr	r0, [pc, #184]	@ (80009f4 <MX_GPIO_Init+0x1ec>)
 800093a:	f000 fb31 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093e:	2301      	movs	r3, #1
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000942:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	482a      	ldr	r0, [pc, #168]	@ (80009fc <MX_GPIO_Init+0x1f4>)
 8000954:	f000 fb24 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000958:	2304      	movs	r3, #4
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4825      	ldr	r0, [pc, #148]	@ (8000a00 <MX_GPIO_Init+0x1f8>)
 800096c:	f000 fb18 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000982:	2305      	movs	r3, #5
 8000984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	481c      	ldr	r0, [pc, #112]	@ (8000a00 <MX_GPIO_Init+0x1f8>)
 800098e:	f000 fb07 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000992:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000996:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4813      	ldr	r0, [pc, #76]	@ (80009f8 <MX_GPIO_Init+0x1f0>)
 80009ac:	f000 faf8 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b0:	2320      	movs	r3, #32
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	480d      	ldr	r0, [pc, #52]	@ (80009f8 <MX_GPIO_Init+0x1f0>)
 80009c4:	f000 faec 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009cc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_GPIO_Init+0x1e8>)
 80009de:	f000 fadf 	bl	8000fa0 <HAL_GPIO_Init>

}
 80009e2:	bf00      	nop
 80009e4:	3730      	adds	r7, #48	@ 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020c00 	.word	0x40020c00
 80009fc:	40020000 	.word	0x40020000
 8000a00:	40020400 	.word	0x40020400

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <Seven_Segment_Digit>:
		(0x6D),(0x78),(0x3E),(0x62),(0x2A),(0x64),(0x6E),
		(0x5B),(0x80),(0x48),(0x01),(0x02),(0x04),(0x08),
		(0x10),(0x20),(0x40),(0x00)};

void Seven_Segment_Digit (unsigned char digit, unsigned char hex_char, unsigned char dot)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	71bb      	strb	r3, [r7, #6]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	717b      	strb	r3, [r7, #5]
/*******************************************************************************
Code to mask and bit shift 0-7 value of digit and 0-15 value of hex_char
to output correct bit pattern to GPIO_Output
*******************************************************************************/
	// Set selected digit to 0, all others high, and output 7 segment pattern
	GPIOE->ODR = (0xFF00 | _7SEG[hex_char]) & ~(1<<(digit+8));
 8000a22:	79bb      	ldrb	r3, [r7, #6]
 8000a24:	4a10      	ldr	r2, [pc, #64]	@ (8000a68 <Seven_Segment_Digit+0x58>)
 8000a26:	5cd3      	ldrb	r3, [r2, r3]
 8000a28:	f443 427f 	orr.w	r2, r3, #65280	@ 0xff00
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	3308      	adds	r3, #8
 8000a30:	2101      	movs	r1, #1
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	43db      	mvns	r3, r3
 8000a38:	401a      	ands	r2, r3
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <Seven_Segment_Digit+0x5c>)
 8000a3c:	615a      	str	r2, [r3, #20]
	if (dot > 0) GPIOE->ODR |= (1<<7); // Set dot segment to 1 if dot is on
 8000a3e:	797b      	ldrb	r3, [r7, #5]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d005      	beq.n	8000a50 <Seven_Segment_Digit+0x40>
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <Seven_Segment_Digit+0x5c>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	4a08      	ldr	r2, [pc, #32]	@ (8000a6c <Seven_Segment_Digit+0x5c>)
 8000a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a4e:	6153      	str	r3, [r2, #20]


	// Set all selects high to latch-in character
	GPIOE->ODR |= 0xFF00;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <Seven_Segment_Digit+0x5c>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <Seven_Segment_Digit+0x5c>)
 8000a56:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 8000a5a:	6153      	str	r3, [r2, #20]
	return;
 8000a5c:	bf00      	nop
}
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	40021000 	.word	0x40021000

08000a70 <Seven_Segment>:

void Seven_Segment(unsigned int HexValue)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
/******************************************************************************
Use a for loop to output HexValue to 7 segment display digits
*******************************************************************************/
	char digit;
	// Send hex values to lower 4 digits
	for (digit=0 ; digit<8 ; digit++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]
 8000a7c:	e010      	b.n	8000aa0 <Seven_Segment+0x30>
	{
	   Seven_Segment_Digit(digit,(HexValue >> (digit*4)) & 0xF,0);
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	fa22 f303 	lsr.w	r3, r2, r3
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	b2d9      	uxtb	r1, r3
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	2200      	movs	r2, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ffbb 	bl	8000a10 <Seven_Segment_Digit>
	for (digit=0 ; digit<8 ; digit++)
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	2b07      	cmp	r3, #7
 8000aa4:	d9eb      	bls.n	8000a7e <Seven_Segment+0xe>
	}

	return;
 8000aa6:	bf00      	nop
}
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aee:	2007      	movs	r0, #7
 8000af0:	f000 fa14 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b48 <HAL_TIM_Base_MspInit+0x48>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d115      	bne.n	8000b3e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <HAL_TIM_Base_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <HAL_TIM_Base_MspInit+0x4c>)
 8000b1c:	f043 0320 	orr.w	r3, r3, #32
 8000b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b22:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <HAL_TIM_Base_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	f003 0320 	and.w	r3, r3, #32
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	2037      	movs	r0, #55	@ 0x37
 8000b34:	f000 f9fd 	bl	8000f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b38:	2037      	movs	r0, #55	@ 0x37
 8000b3a:	f000 fa16 	bl	8000f6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40001400 	.word	0x40001400
 8000b4c:	40023800 	.word	0x40023800

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <NMI_Handler+0x4>

08000b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <MemManage_Handler+0x4>

08000b68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba6:	f000 f8a5 	bl	8000cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <TIM7_IRQHandler+0x10>)
 8000bb6:	f002 fe02 	bl	80037be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000058 	.word	0x20000058

08000bc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <OTG_FS_IRQHandler+0x10>)
 8000bca:	f000 fb9e 	bl	800130a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000a4 	.word	0x200000a4

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	@ (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c00:	f7ff ffea 	bl	8000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	@ (8000c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f003 fc85 	bl	8004538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fc43 	bl	80004b8 <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000c40:	080045b8 	.word	0x080045b8
  ldr r2, =_sbss
 8000c44:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000c48:	20000484 	.word	0x20000484

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c54:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0d      	ldr	r2, [pc, #52]	@ (8000c90 <HAL_Init+0x40>)
 8000c5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c60:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <HAL_Init+0x40>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <HAL_Init+0x40>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f94f 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 f808 	bl	8000c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff ff14 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <HAL_InitTick+0x54>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <HAL_InitTick+0x58>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f967 	bl	8000f86 <HAL_SYSTICK_Config>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00e      	b.n	8000ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b0f      	cmp	r3, #15
 8000cc6:	d80a      	bhi.n	8000cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f000 f92f 	bl	8000f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd4:	4a06      	ldr	r2, [pc, #24]	@ (8000cf0 <HAL_InitTick+0x5c>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e000      	b.n	8000ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000030 	.word	0x20000030
 8000cec:	20000038 	.word	0x20000038
 8000cf0:	20000034 	.word	0x20000034

08000cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_IncTick+0x20>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_IncTick+0x24>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4a04      	ldr	r2, [pc, #16]	@ (8000d18 <HAL_IncTick+0x24>)
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000038 	.word	0x20000038
 8000d18:	200000a0 	.word	0x200000a0

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b03      	ldr	r3, [pc, #12]	@ (8000d30 <HAL_GetTick+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	200000a0 	.word	0x200000a0

08000d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d3c:	f7ff ffee 	bl	8000d1c <HAL_GetTick>
 8000d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d4c:	d005      	beq.n	8000d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_Delay+0x44>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4413      	add	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d5a:	bf00      	nop
 8000d5c:	f7ff ffde 	bl	8000d1c <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d8f7      	bhi.n	8000d5c <HAL_Delay+0x28>
  {
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000038 	.word	0x20000038

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4907      	ldr	r1, [pc, #28]	@ (8000e18 <__NVIC_EnableIRQ+0x38>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	@ (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	@ (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	@ 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	@ 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee8:	d301      	bcc.n	8000eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00f      	b.n	8000f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eee:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <SysTick_Config+0x40>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f7ff ff8e 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <SysTick_Config+0x40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f06:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <SysTick_Config+0x40>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff29 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f44:	f7ff ff3e 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6978      	ldr	r0, [r7, #20]
 8000f50:	f7ff ff8e 	bl	8000e70 <NVIC_EncodePriority>
 8000f54:	4602      	mov	r2, r0
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff5d 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff31 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffa2 	bl	8000ed8 <SysTick_Config>
 8000f94:	4603      	mov	r3, r0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	@ 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	e16b      	b.n	8001294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	f040 815a 	bne.w	800128e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d005      	beq.n	8000ff2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d130      	bne.n	8001054 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	f003 0201 	and.w	r2, r3, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b03      	cmp	r3, #3
 800105e:	d017      	beq.n	8001090 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d123      	bne.n	80010e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	220f      	movs	r2, #15
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	08da      	lsrs	r2, r3, #3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3208      	adds	r2, #8
 80010de:	69b9      	ldr	r1, [r7, #24]
 80010e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0203 	and.w	r2, r3, #3
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80b4 	beq.w	800128e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b60      	ldr	r3, [pc, #384]	@ (80012ac <HAL_GPIO_Init+0x30c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	4a5f      	ldr	r2, [pc, #380]	@ (80012ac <HAL_GPIO_Init+0x30c>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001134:	6453      	str	r3, [r2, #68]	@ 0x44
 8001136:	4b5d      	ldr	r3, [pc, #372]	@ (80012ac <HAL_GPIO_Init+0x30c>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001142:	4a5b      	ldr	r2, [pc, #364]	@ (80012b0 <HAL_GPIO_Init+0x310>)
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	3302      	adds	r3, #2
 800114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	220f      	movs	r2, #15
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a52      	ldr	r2, [pc, #328]	@ (80012b4 <HAL_GPIO_Init+0x314>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d02b      	beq.n	80011c6 <HAL_GPIO_Init+0x226>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a51      	ldr	r2, [pc, #324]	@ (80012b8 <HAL_GPIO_Init+0x318>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d025      	beq.n	80011c2 <HAL_GPIO_Init+0x222>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a50      	ldr	r2, [pc, #320]	@ (80012bc <HAL_GPIO_Init+0x31c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d01f      	beq.n	80011be <HAL_GPIO_Init+0x21e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4f      	ldr	r2, [pc, #316]	@ (80012c0 <HAL_GPIO_Init+0x320>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d019      	beq.n	80011ba <HAL_GPIO_Init+0x21a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4e      	ldr	r2, [pc, #312]	@ (80012c4 <HAL_GPIO_Init+0x324>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d013      	beq.n	80011b6 <HAL_GPIO_Init+0x216>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4d      	ldr	r2, [pc, #308]	@ (80012c8 <HAL_GPIO_Init+0x328>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d00d      	beq.n	80011b2 <HAL_GPIO_Init+0x212>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4c      	ldr	r2, [pc, #304]	@ (80012cc <HAL_GPIO_Init+0x32c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d007      	beq.n	80011ae <HAL_GPIO_Init+0x20e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4b      	ldr	r2, [pc, #300]	@ (80012d0 <HAL_GPIO_Init+0x330>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d101      	bne.n	80011aa <HAL_GPIO_Init+0x20a>
 80011a6:	2307      	movs	r3, #7
 80011a8:	e00e      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011aa:	2308      	movs	r3, #8
 80011ac:	e00c      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011ae:	2306      	movs	r3, #6
 80011b0:	e00a      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011b2:	2305      	movs	r3, #5
 80011b4:	e008      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011b6:	2304      	movs	r3, #4
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011ba:	2303      	movs	r3, #3
 80011bc:	e004      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011be:	2302      	movs	r3, #2
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011c6:	2300      	movs	r3, #0
 80011c8:	69fa      	ldr	r2, [r7, #28]
 80011ca:	f002 0203 	and.w	r2, r2, #3
 80011ce:	0092      	lsls	r2, r2, #2
 80011d0:	4093      	lsls	r3, r2
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d8:	4935      	ldr	r1, [pc, #212]	@ (80012b0 <HAL_GPIO_Init+0x310>)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e6:	4b3b      	ldr	r3, [pc, #236]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120a:	4a32      	ldr	r2, [pc, #200]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001210:	4b30      	ldr	r3, [pc, #192]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001234:	4a27      	ldr	r2, [pc, #156]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800123a:	4b26      	ldr	r3, [pc, #152]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800125e:	4a1d      	ldr	r2, [pc, #116]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001288:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3301      	adds	r3, #1
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	f67f ae90 	bls.w	8000fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3724      	adds	r7, #36	@ 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40013800 	.word	0x40013800
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40021400 	.word	0x40021400
 80012cc:	40021800 	.word	0x40021800
 80012d0:	40021c00 	.word	0x40021c00
 80012d4:	40013c00 	.word	0x40013c00

080012d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
 80012e4:	4613      	mov	r3, r2
 80012e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e8:	787b      	ldrb	r3, [r7, #1]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f4:	e003      	b.n	80012fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	041a      	lsls	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f002 fdb9 	bl	8003e98 <USB_GetMode>
 8001326:	4603      	mov	r3, r0
 8001328:	2b01      	cmp	r3, #1
 800132a:	f040 80fb 	bne.w	8001524 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f002 fd7c 	bl	8003e30 <USB_ReadInterrupts>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 80f1 	beq.w	8001522 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f002 fd73 	bl	8003e30 <USB_ReadInterrupts>
 800134a:	4603      	mov	r3, r0
 800134c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001350:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001354:	d104      	bne.n	8001360 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800135e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f002 fd63 	bl	8003e30 <USB_ReadInterrupts>
 800136a:	4603      	mov	r3, r0
 800136c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001370:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001374:	d104      	bne.n	8001380 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800137e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f002 fd53 	bl	8003e30 <USB_ReadInterrupts>
 800138a:	4603      	mov	r3, r0
 800138c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001390:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001394:	d104      	bne.n	80013a0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800139e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fd43 	bl	8003e30 <USB_ReadInterrupts>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d103      	bne.n	80013bc <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2202      	movs	r2, #2
 80013ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 fd35 	bl	8003e30 <USB_ReadInterrupts>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013d0:	d120      	bne.n	8001414 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80013da:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d113      	bne.n	8001414 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80013ec:	2110      	movs	r1, #16
 80013ee:	6938      	ldr	r0, [r7, #16]
 80013f0:	f002 fc66 	bl	8003cc0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80013f4:	6938      	ldr	r0, [r7, #16]
 80013f6:	f002 fc95 	bl	8003d24 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7a5b      	ldrb	r3, [r3, #9]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d105      	bne.n	800140e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2101      	movs	r1, #1
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fd53 	bl	8003eb4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f003 f80b 	bl	800442a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f002 fd09 	bl	8003e30 <USB_ReadInterrupts>
 800141e:	4603      	mov	r3, r0
 8001420:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001428:	d102      	bne.n	8001430 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f001 fca1 	bl	8002d72 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f002 fcfb 	bl	8003e30 <USB_ReadInterrupts>
 800143a:	4603      	mov	r3, r0
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b08      	cmp	r3, #8
 8001442:	d106      	bne.n	8001452 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f002 ffd4 	bl	80043f2 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2208      	movs	r2, #8
 8001450:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f002 fcea 	bl	8003e30 <USB_ReadInterrupts>
 800145c:	4603      	mov	r3, r0
 800145e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001462:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001466:	d139      	bne.n	80014dc <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fd5e 	bl	8003f2e <USB_HC_ReadInterrupt>
 8001472:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	e025      	b.n	80014c6 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f003 030f 	and.w	r3, r3, #15
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d018      	beq.n	80014c0 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	015a      	lsls	r2, r3, #5
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4413      	add	r3, r2
 8001496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014a4:	d106      	bne.n	80014b4 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4619      	mov	r1, r3
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f859 	bl	8001564 <HCD_HC_IN_IRQHandler>
 80014b2:	e005      	b.n	80014c0 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4619      	mov	r1, r3
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 febb 	bl	8002236 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3301      	adds	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	795b      	ldrb	r3, [r3, #5]
 80014ca:	461a      	mov	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d3d3      	bcc.n	800147a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 fca5 	bl	8003e30 <USB_ReadInterrupts>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	2b10      	cmp	r3, #16
 80014ee:	d101      	bne.n	80014f4 <HAL_HCD_IRQHandler+0x1ea>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e000      	b.n	80014f6 <HAL_HCD_IRQHandler+0x1ec>
 80014f4:	2300      	movs	r3, #0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d014      	beq.n	8001524 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0210 	bic.w	r2, r2, #16
 8001508:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f001 fb52 	bl	8002bb4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	699a      	ldr	r2, [r3, #24]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0210 	orr.w	r2, r2, #16
 800151e:	619a      	str	r2, [r3, #24]
 8001520:	e000      	b.n	8001524 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001522:	bf00      	nop
    }
  }
}
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <HAL_HCD_Stop+0x16>
 800153c:	2302      	movs	r3, #2
 800153e:	e00d      	b.n	800155c <HAL_HCD_Stop+0x32>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f002 fe1f 	bl	8004190 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	78fa      	ldrb	r2, [r7, #3]
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f002 fc67 	bl	8003e56 <USB_ReadChInterrupts>
 8001588:	4603      	mov	r3, r0
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b04      	cmp	r3, #4
 8001590:	d11a      	bne.n	80015c8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	015a      	lsls	r2, r3, #5
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4413      	add	r3, r2
 800159a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800159e:	461a      	mov	r2, r3
 80015a0:	2304      	movs	r3, #4
 80015a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	334d      	adds	r3, #77	@ 0x4d
 80015b4:	2207      	movs	r2, #7
 80015b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	78fa      	ldrb	r2, [r7, #3]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f002 fcc5 	bl	8003f50 <USB_HC_Halt>
 80015c6:	e09e      	b.n	8001706 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	78fa      	ldrb	r2, [r7, #3]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 fc40 	bl	8003e56 <USB_ReadChInterrupts>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015e0:	d11b      	bne.n	800161a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80015e2:	78fb      	ldrb	r3, [r7, #3]
 80015e4:	015a      	lsls	r2, r3, #5
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015ee:	461a      	mov	r2, r3
 80015f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	1a9b      	subs	r3, r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	334d      	adds	r3, #77	@ 0x4d
 8001606:	2208      	movs	r2, #8
 8001608:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	78fa      	ldrb	r2, [r7, #3]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f002 fc9c 	bl	8003f50 <USB_HC_Halt>
 8001618:	e075      	b.n	8001706 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f002 fc17 	bl	8003e56 <USB_ReadChInterrupts>
 8001628:	4603      	mov	r3, r0
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b08      	cmp	r3, #8
 8001630:	d11a      	bne.n	8001668 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	015a      	lsls	r2, r3, #5
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4413      	add	r3, r2
 800163a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800163e:	461a      	mov	r2, r3
 8001640:	2308      	movs	r3, #8
 8001642:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	334d      	adds	r3, #77	@ 0x4d
 8001654:	2206      	movs	r2, #6
 8001656:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	78fa      	ldrb	r2, [r7, #3]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f002 fc75 	bl	8003f50 <USB_HC_Halt>
 8001666:	e04e      	b.n	8001706 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	78fa      	ldrb	r2, [r7, #3]
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f002 fbf0 	bl	8003e56 <USB_ReadChInterrupts>
 8001676:	4603      	mov	r3, r0
 8001678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800167c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001680:	d11b      	bne.n	80016ba <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	015a      	lsls	r2, r3, #5
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4413      	add	r3, r2
 800168a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800168e:	461a      	mov	r2, r3
 8001690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001694:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	334d      	adds	r3, #77	@ 0x4d
 80016a6:	2209      	movs	r2, #9
 80016a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	78fa      	ldrb	r2, [r7, #3]
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 fc4c 	bl	8003f50 <USB_HC_Halt>
 80016b8:	e025      	b.n	8001706 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	78fa      	ldrb	r2, [r7, #3]
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f002 fbc7 	bl	8003e56 <USB_ReadChInterrupts>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ce:	2b80      	cmp	r3, #128	@ 0x80
 80016d0:	d119      	bne.n	8001706 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	015a      	lsls	r2, r3, #5
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80016de:	461a      	mov	r2, r3
 80016e0:	2380      	movs	r3, #128	@ 0x80
 80016e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80016e4:	78fa      	ldrb	r2, [r7, #3]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	334d      	adds	r3, #77	@ 0x4d
 80016f4:	2207      	movs	r2, #7
 80016f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f002 fc25 	bl	8003f50 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f002 fba1 	bl	8003e56 <USB_ReadChInterrupts>
 8001714:	4603      	mov	r3, r0
 8001716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800171a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800171e:	d112      	bne.n	8001746 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	78fa      	ldrb	r2, [r7, #3]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f002 fc11 	bl	8003f50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	015a      	lsls	r2, r3, #5
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4413      	add	r3, r2
 8001736:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800173a:	461a      	mov	r2, r3
 800173c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001740:	6093      	str	r3, [r2, #8]
 8001742:	f000 bd75 	b.w	8002230 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f002 fb81 	bl	8003e56 <USB_ReadChInterrupts>
 8001754:	4603      	mov	r3, r0
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b01      	cmp	r3, #1
 800175c:	f040 8128 	bne.w	80019b0 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	015a      	lsls	r2, r3, #5
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4413      	add	r3, r2
 8001768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800176c:	461a      	mov	r2, r3
 800176e:	2320      	movs	r3, #32
 8001770:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	1a9b      	subs	r3, r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	331b      	adds	r3, #27
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d119      	bne.n	80017bc <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	331b      	adds	r3, #27
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	015a      	lsls	r2, r3, #5
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4413      	add	r3, r2
 80017a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	0151      	lsls	r1, r2, #5
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	440a      	add	r2, r1
 80017b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ba:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	799b      	ldrb	r3, [r3, #6]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01b      	beq.n	80017fc <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	3330      	adds	r3, #48	@ 0x30
 80017d4:	6819      	ldr	r1, [r3, #0]
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	015a      	lsls	r2, r3, #5
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4413      	add	r3, r2
 80017de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	1ac9      	subs	r1, r1, r3
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4403      	add	r3, r0
 80017f8:	3338      	adds	r3, #56	@ 0x38
 80017fa:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80017fc:	78fa      	ldrb	r2, [r7, #3]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	334d      	adds	r3, #77	@ 0x4d
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	1a9b      	subs	r3, r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	3344      	adds	r3, #68	@ 0x44
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	015a      	lsls	r2, r3, #5
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4413      	add	r3, r2
 800182c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001830:	461a      	mov	r2, r3
 8001832:	2301      	movs	r3, #1
 8001834:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	3326      	adds	r3, #38	@ 0x26
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00a      	beq.n	8001862 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	1a9b      	subs	r3, r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	3326      	adds	r3, #38	@ 0x26
 800185c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800185e:	2b02      	cmp	r3, #2
 8001860:	d110      	bne.n	8001884 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f002 fb70 	bl	8003f50 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	015a      	lsls	r2, r3, #5
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4413      	add	r3, r2
 8001878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800187c:	461a      	mov	r2, r3
 800187e:	2310      	movs	r3, #16
 8001880:	6093      	str	r3, [r2, #8]
 8001882:	e03d      	b.n	8001900 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4613      	mov	r3, r2
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	3326      	adds	r3, #38	@ 0x26
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d00a      	beq.n	80018b0 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	3326      	adds	r3, #38	@ 0x26
 80018aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d127      	bne.n	8001900 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	015a      	lsls	r2, r3, #5
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4413      	add	r3, r2
 80018b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	0151      	lsls	r1, r2, #5
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	440a      	add	r2, r1
 80018c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80018ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80018ce:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	334c      	adds	r3, #76	@ 0x4c
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	334c      	adds	r3, #76	@ 0x4c
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	4619      	mov	r1, r3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f002 fda3 	bl	8004446 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	799b      	ldrb	r3, [r3, #6]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d13b      	bne.n	8001980 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	3338      	adds	r3, #56	@ 0x38
 8001918:	6819      	ldr	r1, [r3, #0]
 800191a:	78fa      	ldrb	r2, [r7, #3]
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4403      	add	r3, r0
 8001928:	3328      	adds	r3, #40	@ 0x28
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	440b      	add	r3, r1
 800192e:	1e59      	subs	r1, r3, #1
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4403      	add	r3, r0
 800193e:	3328      	adds	r3, #40	@ 0x28
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	fbb1 f3f3 	udiv	r3, r1, r3
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8470 	beq.w	8002230 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001950:	78fa      	ldrb	r2, [r7, #3]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	333c      	adds	r3, #60	@ 0x3c
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	f083 0301 	eor.w	r3, r3, #1
 8001968:	b2d8      	uxtb	r0, r3
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	333c      	adds	r3, #60	@ 0x3c
 8001978:	4602      	mov	r2, r0
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	f000 bc58 	b.w	8002230 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	333c      	adds	r3, #60	@ 0x3c
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	f083 0301 	eor.w	r3, r3, #1
 8001998:	b2d8      	uxtb	r0, r3
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	333c      	adds	r3, #60	@ 0x3c
 80019a8:	4602      	mov	r2, r0
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	f000 bc40 	b.w	8002230 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f002 fa4c 	bl	8003e56 <USB_ReadChInterrupts>
 80019be:	4603      	mov	r3, r0
 80019c0:	f003 0320 	and.w	r3, r3, #32
 80019c4:	2b20      	cmp	r3, #32
 80019c6:	d131      	bne.n	8001a2c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	015a      	lsls	r2, r3, #5
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019d4:	461a      	mov	r2, r3
 80019d6:	2320      	movs	r3, #32
 80019d8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80019da:	78fa      	ldrb	r2, [r7, #3]
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	331a      	adds	r3, #26
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	f040 841f 	bne.w	8002230 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80019f2:	78fa      	ldrb	r2, [r7, #3]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	331b      	adds	r3, #27
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001a06:	78fa      	ldrb	r2, [r7, #3]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	334d      	adds	r3, #77	@ 0x4d
 8001a16:	2203      	movs	r2, #3
 8001a18:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f002 fa94 	bl	8003f50 <USB_HC_Halt>
 8001a28:	f000 bc02 	b.w	8002230 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fa0e 	bl	8003e56 <USB_ReadChInterrupts>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	f040 8305 	bne.w	8002050 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	015a      	lsls	r2, r3, #5
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a52:	461a      	mov	r2, r3
 8001a54:	2302      	movs	r3, #2
 8001a56:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	334d      	adds	r3, #77	@ 0x4d
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d114      	bne.n	8001a98 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	1a9b      	subs	r3, r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	334d      	adds	r3, #77	@ 0x4d
 8001a7e:	2202      	movs	r2, #2
 8001a80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001a82:	78fa      	ldrb	r2, [r7, #3]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	1a9b      	subs	r3, r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	440b      	add	r3, r1
 8001a90:	334c      	adds	r3, #76	@ 0x4c
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	e2cc      	b.n	8002032 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	334d      	adds	r3, #77	@ 0x4d
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d114      	bne.n	8001ad8 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001aae:	78fa      	ldrb	r2, [r7, #3]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	440b      	add	r3, r1
 8001abc:	334d      	adds	r3, #77	@ 0x4d
 8001abe:	2202      	movs	r2, #2
 8001ac0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	334c      	adds	r3, #76	@ 0x4c
 8001ad2:	2205      	movs	r2, #5
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	e2ac      	b.n	8002032 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001ad8:	78fa      	ldrb	r2, [r7, #3]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	334d      	adds	r3, #77	@ 0x4d
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b07      	cmp	r3, #7
 8001aec:	d00b      	beq.n	8001b06 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001aee:	78fa      	ldrb	r2, [r7, #3]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	334d      	adds	r3, #77	@ 0x4d
 8001afe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001b00:	2b09      	cmp	r3, #9
 8001b02:	f040 80a6 	bne.w	8001c52 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001b06:	78fa      	ldrb	r2, [r7, #3]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	334d      	adds	r3, #77	@ 0x4d
 8001b16:	2202      	movs	r2, #2
 8001b18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001b1a:	78fa      	ldrb	r2, [r7, #3]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	3344      	adds	r3, #68	@ 0x44
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	1c59      	adds	r1, r3, #1
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4403      	add	r3, r0
 8001b3a:	3344      	adds	r3, #68	@ 0x44
 8001b3c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3344      	adds	r3, #68	@ 0x44
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d943      	bls.n	8001bdc <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001b54:	78fa      	ldrb	r2, [r7, #3]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	3344      	adds	r3, #68	@ 0x44
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001b68:	78fa      	ldrb	r2, [r7, #3]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	1a9b      	subs	r3, r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	331a      	adds	r3, #26
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d123      	bne.n	8001bc6 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	331b      	adds	r3, #27
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001b92:	78fa      	ldrb	r2, [r7, #3]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	331c      	adds	r3, #28
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	015a      	lsls	r2, r3, #5
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	0151      	lsls	r1, r2, #5
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	440a      	add	r2, r1
 8001bbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001bc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc4:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001bc6:	78fa      	ldrb	r2, [r7, #3]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	334c      	adds	r3, #76	@ 0x4c
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001bda:	e229      	b.n	8002030 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	334c      	adds	r3, #76	@ 0x4c
 8001bec:	2202      	movs	r2, #2
 8001bee:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3326      	adds	r3, #38	@ 0x26
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	3326      	adds	r3, #38	@ 0x26
 8001c16:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	f040 8209 	bne.w	8002030 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001c34:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c3c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	015a      	lsls	r2, r3, #5
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4413      	add	r3, r2
 8001c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001c50:	e1ee      	b.n	8002030 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001c52:	78fa      	ldrb	r2, [r7, #3]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	334d      	adds	r3, #77	@ 0x4d
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	f040 80c8 	bne.w	8001dfa <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c6a:	78fa      	ldrb	r2, [r7, #3]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	334d      	adds	r3, #77	@ 0x4d
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001c7e:	78fa      	ldrb	r2, [r7, #3]
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	331b      	adds	r3, #27
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	f040 81ce 	bne.w	8002032 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001c96:	78fa      	ldrb	r2, [r7, #3]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	1a9b      	subs	r3, r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	3326      	adds	r3, #38	@ 0x26
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d16b      	bne.n	8001d84 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	3348      	adds	r3, #72	@ 0x48
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	1c59      	adds	r1, r3, #1
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	1a9b      	subs	r3, r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4403      	add	r3, r0
 8001ccc:	3348      	adds	r3, #72	@ 0x48
 8001cce:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	3348      	adds	r3, #72	@ 0x48
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d943      	bls.n	8001d6e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	1a9b      	subs	r3, r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3348      	adds	r3, #72	@ 0x48
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001cfa:	78fa      	ldrb	r2, [r7, #3]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	331b      	adds	r3, #27
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001d0e:	78fa      	ldrb	r2, [r7, #3]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3344      	adds	r3, #68	@ 0x44
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d809      	bhi.n	8001d38 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	1a9b      	subs	r3, r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	331c      	adds	r3, #28
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	78fa      	ldrb	r2, [r7, #3]
 8001d48:	0151      	lsls	r1, r2, #5
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	440a      	add	r2, r1
 8001d4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d56:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001d58:	78fa      	ldrb	r2, [r7, #3]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	1a9b      	subs	r3, r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	334c      	adds	r3, #76	@ 0x4c
 8001d68:	2204      	movs	r2, #4
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	e014      	b.n	8001d98 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001d6e:	78fa      	ldrb	r2, [r7, #3]
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	334c      	adds	r3, #76	@ 0x4c
 8001d7e:	2202      	movs	r2, #2
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e009      	b.n	8001d98 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	334c      	adds	r3, #76	@ 0x4c
 8001d94:	2202      	movs	r2, #2
 8001d96:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	1a9b      	subs	r3, r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	3326      	adds	r3, #38	@ 0x26
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001dae:	78fa      	ldrb	r2, [r7, #3]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	1a9b      	subs	r3, r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	3326      	adds	r3, #38	@ 0x26
 8001dbe:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	f040 8136 	bne.w	8002032 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001ddc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001de4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	e11b      	b.n	8002032 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	334d      	adds	r3, #77	@ 0x4d
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	f040 8081 	bne.w	8001f14 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e12:	78fa      	ldrb	r2, [r7, #3]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	334d      	adds	r3, #77	@ 0x4d
 8001e22:	2202      	movs	r2, #2
 8001e24:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001e26:	78fa      	ldrb	r2, [r7, #3]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	1a9b      	subs	r3, r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	331b      	adds	r3, #27
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	f040 80fa 	bne.w	8002032 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001e3e:	78fa      	ldrb	r2, [r7, #3]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	1a9b      	subs	r3, r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	334c      	adds	r3, #76	@ 0x4c
 8001e4e:	2202      	movs	r2, #2
 8001e50:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	0151      	lsls	r1, r2, #5
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	440a      	add	r2, r1
 8001e68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e70:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	0151      	lsls	r1, r2, #5
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	440a      	add	r2, r1
 8001e88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e90:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8001e92:	78fb      	ldrb	r3, [r7, #3]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	78fa      	ldrb	r2, [r7, #3]
 8001ea2:	0151      	lsls	r1, r2, #5
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	440a      	add	r2, r1
 8001ea8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001eac:	f023 0320 	bic.w	r3, r3, #32
 8001eb0:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001eb2:	78fa      	ldrb	r2, [r7, #3]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3326      	adds	r3, #38	@ 0x26
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00b      	beq.n	8001ee0 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3326      	adds	r3, #38	@ 0x26
 8001ed8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	f040 80a9 	bne.w	8002032 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001ef6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001efe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e08e      	b.n	8002032 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	334d      	adds	r3, #77	@ 0x4d
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d143      	bne.n	8001fb2 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	334d      	adds	r3, #77	@ 0x4d
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	334c      	adds	r3, #76	@ 0x4c
 8001f4e:	2202      	movs	r2, #2
 8001f50:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f52:	78fa      	ldrb	r2, [r7, #3]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	3326      	adds	r3, #38	@ 0x26
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00a      	beq.n	8001f7e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001f68:	78fa      	ldrb	r2, [r7, #3]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	3326      	adds	r3, #38	@ 0x26
 8001f78:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d159      	bne.n	8002032 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001f94:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f9c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	e03f      	b.n	8002032 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	334d      	adds	r3, #77	@ 0x4d
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d126      	bne.n	8002016 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	334d      	adds	r3, #77	@ 0x4d
 8001fd8:	2202      	movs	r2, #2
 8001fda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	3344      	adds	r3, #68	@ 0x44
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	1c59      	adds	r1, r3, #1
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4403      	add	r3, r0
 8001ffc:	3344      	adds	r3, #68	@ 0x44
 8001ffe:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	334c      	adds	r3, #76	@ 0x4c
 8002010:	2204      	movs	r2, #4
 8002012:	701a      	strb	r2, [r3, #0]
 8002014:	e00d      	b.n	8002032 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	334d      	adds	r3, #77	@ 0x4d
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b02      	cmp	r3, #2
 800202a:	f000 8100 	beq.w	800222e <HCD_HC_IN_IRQHandler+0xcca>
 800202e:	e000      	b.n	8002032 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002030:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	334c      	adds	r3, #76	@ 0x4c
 8002042:	781a      	ldrb	r2, [r3, #0]
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	4619      	mov	r1, r3
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f002 f9fc 	bl	8004446 <HAL_HCD_HC_NotifyURBChange_Callback>
 800204e:	e0ef      	b.n	8002230 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	78fa      	ldrb	r2, [r7, #3]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f001 fefc 	bl	8003e56 <USB_ReadChInterrupts>
 800205e:	4603      	mov	r3, r0
 8002060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002064:	2b40      	cmp	r3, #64	@ 0x40
 8002066:	d12f      	bne.n	80020c8 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002074:	461a      	mov	r2, r3
 8002076:	2340      	movs	r3, #64	@ 0x40
 8002078:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800207a:	78fa      	ldrb	r2, [r7, #3]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	1a9b      	subs	r3, r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	334d      	adds	r3, #77	@ 0x4d
 800208a:	2205      	movs	r2, #5
 800208c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	331a      	adds	r3, #26
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d109      	bne.n	80020b8 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	3344      	adds	r3, #68	@ 0x44
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	78fa      	ldrb	r2, [r7, #3]
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f001 ff45 	bl	8003f50 <USB_HC_Halt>
 80020c6:	e0b3      	b.n	8002230 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 fec0 	bl	8003e56 <USB_ReadChInterrupts>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b10      	cmp	r3, #16
 80020de:	f040 80a7 	bne.w	8002230 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3326      	adds	r3, #38	@ 0x26
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d11b      	bne.n	8002130 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	3344      	adds	r3, #68	@ 0x44
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800210c:	78fa      	ldrb	r2, [r7, #3]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	1a9b      	subs	r3, r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	334d      	adds	r3, #77	@ 0x4d
 800211c:	2204      	movs	r2, #4
 800211e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f001 ff11 	bl	8003f50 <USB_HC_Halt>
 800212e:	e03f      	b.n	80021b0 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	1a9b      	subs	r3, r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	3326      	adds	r3, #38	@ 0x26
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	3326      	adds	r3, #38	@ 0x26
 8002156:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002158:	2b02      	cmp	r3, #2
 800215a:	d129      	bne.n	80021b0 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	3344      	adds	r3, #68	@ 0x44
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	799b      	ldrb	r3, [r3, #6]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HCD_HC_IN_IRQHandler+0xc2a>
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	331b      	adds	r3, #27
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d110      	bne.n	80021b0 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	334d      	adds	r3, #77	@ 0x4d
 800219e:	2204      	movs	r2, #4
 80021a0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f001 fed0 	bl	8003f50 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	331b      	adds	r3, #27
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d129      	bne.n	800221a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	1a9b      	subs	r3, r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	331b      	adds	r3, #27
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	0151      	lsls	r1, r2, #5
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	440a      	add	r2, r1
 80021f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	78fa      	ldrb	r2, [r7, #3]
 800220a:	0151      	lsls	r1, r2, #5
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	440a      	add	r2, r1
 8002210:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002214:	f043 0320 	orr.w	r3, r3, #32
 8002218:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002226:	461a      	mov	r2, r3
 8002228:	2310      	movs	r3, #16
 800222a:	6093      	str	r3, [r2, #8]
 800222c:	e000      	b.n	8002230 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800222e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f001 fdfe 	bl	8003e56 <USB_ReadChInterrupts>
 800225a:	4603      	mov	r3, r0
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b04      	cmp	r3, #4
 8002262:	d11b      	bne.n	800229c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002270:	461a      	mov	r2, r3
 8002272:	2304      	movs	r3, #4
 8002274:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	334d      	adds	r3, #77	@ 0x4d
 8002286:	2207      	movs	r2, #7
 8002288:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f001 fe5c 	bl	8003f50 <USB_HC_Halt>
 8002298:	f000 bc89 	b.w	8002bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f001 fdd6 	bl	8003e56 <USB_ReadChInterrupts>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	f040 8082 	bne.w	80023ba <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022c2:	461a      	mov	r2, r3
 80022c4:	2320      	movs	r3, #32
 80022c6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	3319      	adds	r3, #25
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d124      	bne.n	8002328 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80022de:	78fa      	ldrb	r2, [r7, #3]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	3319      	adds	r3, #25
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	334c      	adds	r3, #76	@ 0x4c
 8002302:	2202      	movs	r2, #2
 8002304:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	334d      	adds	r3, #77	@ 0x4d
 8002316:	2203      	movs	r2, #3
 8002318:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f001 fe14 	bl	8003f50 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	331a      	adds	r3, #26
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	f040 8437 	bne.w	8002bae <HCD_HC_OUT_IRQHandler+0x978>
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	331b      	adds	r3, #27
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f040 842b 	bne.w	8002bae <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	3326      	adds	r3, #38	@ 0x26
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d009      	beq.n	8002382 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	331b      	adds	r3, #27
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	334d      	adds	r3, #77	@ 0x4d
 8002392:	2203      	movs	r2, #3
 8002394:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f001 fdd6 	bl	8003f50 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80023a4:	78fa      	ldrb	r2, [r7, #3]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	3344      	adds	r3, #68	@ 0x44
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e3f9      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f001 fd47 	bl	8003e56 <USB_ReadChInterrupts>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023d2:	d111      	bne.n	80023f8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023e0:	461a      	mov	r2, r3
 80023e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023e6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f001 fdad 	bl	8003f50 <USB_HC_Halt>
 80023f6:	e3da      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f001 fd28 	bl	8003e56 <USB_ReadChInterrupts>
 8002406:	4603      	mov	r3, r0
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d168      	bne.n	80024e2 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	3344      	adds	r3, #68	@ 0x44
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f001 fd12 	bl	8003e56 <USB_ReadChInterrupts>
 8002432:	4603      	mov	r3, r0
 8002434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002438:	2b40      	cmp	r3, #64	@ 0x40
 800243a:	d112      	bne.n	8002462 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	3319      	adds	r3, #25
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800245c:	461a      	mov	r2, r3
 800245e:	2340      	movs	r3, #64	@ 0x40
 8002460:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	331b      	adds	r3, #27
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d019      	beq.n	80024ac <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	331b      	adds	r3, #27
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	0151      	lsls	r1, r2, #5
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	440a      	add	r2, r1
 80024a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024aa:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b8:	461a      	mov	r2, r3
 80024ba:	2301      	movs	r3, #1
 80024bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	334d      	adds	r3, #77	@ 0x4d
 80024ce:	2201      	movs	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f001 fd38 	bl	8003f50 <USB_HC_Halt>
 80024e0:	e365      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f001 fcb3 	bl	8003e56 <USB_ReadChInterrupts>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f6:	2b40      	cmp	r3, #64	@ 0x40
 80024f8:	d139      	bne.n	800256e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	334d      	adds	r3, #77	@ 0x4d
 800250a:	2205      	movs	r2, #5
 800250c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	331a      	adds	r3, #26
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3319      	adds	r3, #25
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3344      	adds	r3, #68	@ 0x44
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f001 fcfb 	bl	8003f50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002566:	461a      	mov	r2, r3
 8002568:	2340      	movs	r3, #64	@ 0x40
 800256a:	6093      	str	r3, [r2, #8]
 800256c:	e31f      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	78fa      	ldrb	r2, [r7, #3]
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f001 fc6d 	bl	8003e56 <USB_ReadChInterrupts>
 800257c:	4603      	mov	r3, r0
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b08      	cmp	r3, #8
 8002584:	d11a      	bne.n	80025bc <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002592:	461a      	mov	r2, r3
 8002594:	2308      	movs	r3, #8
 8002596:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	334d      	adds	r3, #77	@ 0x4d
 80025a8:	2206      	movs	r2, #6
 80025aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 fccb 	bl	8003f50 <USB_HC_Halt>
 80025ba:	e2f8      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f001 fc46 	bl	8003e56 <USB_ReadChInterrupts>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b10      	cmp	r3, #16
 80025d2:	d144      	bne.n	800265e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	3344      	adds	r3, #68	@ 0x44
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	334d      	adds	r3, #77	@ 0x4d
 80025f8:	2204      	movs	r2, #4
 80025fa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	3319      	adds	r3, #25
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d114      	bne.n	800263c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	3318      	adds	r3, #24
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d109      	bne.n	800263c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3319      	adds	r3, #25
 8002638:	2201      	movs	r2, #1
 800263a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f001 fc83 	bl	8003f50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002656:	461a      	mov	r2, r3
 8002658:	2310      	movs	r3, #16
 800265a:	6093      	str	r3, [r2, #8]
 800265c:	e2a7      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	4611      	mov	r1, r2
 8002666:	4618      	mov	r0, r3
 8002668:	f001 fbf5 	bl	8003e56 <USB_ReadChInterrupts>
 800266c:	4603      	mov	r3, r0
 800266e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002672:	2b80      	cmp	r3, #128	@ 0x80
 8002674:	f040 8083 	bne.w	800277e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	799b      	ldrb	r3, [r3, #6]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d111      	bne.n	80026a4 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	334d      	adds	r3, #77	@ 0x4d
 8002690:	2207      	movs	r2, #7
 8002692:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f001 fc57 	bl	8003f50 <USB_HC_Halt>
 80026a2:	e062      	b.n	800276a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	3344      	adds	r3, #68	@ 0x44
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	1c59      	adds	r1, r3, #1
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4403      	add	r3, r0
 80026c4:	3344      	adds	r3, #68	@ 0x44
 80026c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3344      	adds	r3, #68	@ 0x44
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d922      	bls.n	8002724 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	3344      	adds	r3, #68	@ 0x44
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80026f2:	78fa      	ldrb	r2, [r7, #3]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	1a9b      	subs	r3, r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	334c      	adds	r3, #76	@ 0x4c
 8002702:	2204      	movs	r2, #4
 8002704:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	334c      	adds	r3, #76	@ 0x4c
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	4619      	mov	r1, r3
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f001 fe92 	bl	8004446 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002722:	e022      	b.n	800276a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	334c      	adds	r3, #76	@ 0x4c
 8002734:	2202      	movs	r2, #2
 8002736:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800274e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002756:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002764:	461a      	mov	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002776:	461a      	mov	r2, r3
 8002778:	2380      	movs	r3, #128	@ 0x80
 800277a:	6093      	str	r3, [r2, #8]
 800277c:	e217      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f001 fb65 	bl	8003e56 <USB_ReadChInterrupts>
 800278c:	4603      	mov	r3, r0
 800278e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002796:	d11b      	bne.n	80027d0 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	334d      	adds	r3, #77	@ 0x4d
 80027a8:	2209      	movs	r2, #9
 80027aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 fbcb 	bl	8003f50 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c6:	461a      	mov	r2, r3
 80027c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027cc:	6093      	str	r3, [r2, #8]
 80027ce:	e1ee      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f001 fb3c 	bl	8003e56 <USB_ReadChInterrupts>
 80027de:	4603      	mov	r3, r0
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	f040 81df 	bne.w	8002ba8 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027f6:	461a      	mov	r2, r3
 80027f8:	2302      	movs	r3, #2
 80027fa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	334d      	adds	r3, #77	@ 0x4d
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	f040 8093 	bne.w	800293a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	334d      	adds	r3, #77	@ 0x4d
 8002824:	2202      	movs	r2, #2
 8002826:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	334c      	adds	r3, #76	@ 0x4c
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	3326      	adds	r3, #38	@ 0x26
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d00b      	beq.n	800286a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	3326      	adds	r3, #38	@ 0x26
 8002862:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002864:	2b03      	cmp	r3, #3
 8002866:	f040 8190 	bne.w	8002b8a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	799b      	ldrb	r3, [r3, #6]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d115      	bne.n	800289e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	333d      	adds	r3, #61	@ 0x3d
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	f083 0301 	eor.w	r3, r3, #1
 800288a:	b2d8      	uxtb	r0, r3
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	333d      	adds	r3, #61	@ 0x3d
 800289a:	4602      	mov	r2, r0
 800289c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	799b      	ldrb	r3, [r3, #6]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	f040 8171 	bne.w	8002b8a <HCD_HC_OUT_IRQHandler+0x954>
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3334      	adds	r3, #52	@ 0x34
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8165 	beq.w	8002b8a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	3334      	adds	r3, #52	@ 0x34
 80028d0:	6819      	ldr	r1, [r3, #0]
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4403      	add	r3, r0
 80028e0:	3328      	adds	r3, #40	@ 0x28
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	440b      	add	r3, r1
 80028e6:	1e59      	subs	r1, r3, #1
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4403      	add	r3, r0
 80028f6:	3328      	adds	r3, #40	@ 0x28
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80028fe:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 813f 	beq.w	8002b8a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800290c:	78fa      	ldrb	r2, [r7, #3]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	333d      	adds	r3, #61	@ 0x3d
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	f083 0301 	eor.w	r3, r3, #1
 8002924:	b2d8      	uxtb	r0, r3
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	333d      	adds	r3, #61	@ 0x3d
 8002934:	4602      	mov	r2, r0
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e127      	b.n	8002b8a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	1a9b      	subs	r3, r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	334d      	adds	r3, #77	@ 0x4d
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d120      	bne.n	8002992 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	334d      	adds	r3, #77	@ 0x4d
 8002960:	2202      	movs	r2, #2
 8002962:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	331b      	adds	r3, #27
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	f040 8107 	bne.w	8002b8a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	334c      	adds	r3, #76	@ 0x4c
 800298c:	2202      	movs	r2, #2
 800298e:	701a      	strb	r2, [r3, #0]
 8002990:	e0fb      	b.n	8002b8a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	334d      	adds	r3, #77	@ 0x4d
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d13a      	bne.n	8002a1e <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	334d      	adds	r3, #77	@ 0x4d
 80029b8:	2202      	movs	r2, #2
 80029ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	334c      	adds	r3, #76	@ 0x4c
 80029cc:	2202      	movs	r2, #2
 80029ce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80029d0:	78fa      	ldrb	r2, [r7, #3]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	331b      	adds	r3, #27
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	f040 80d1 	bne.w	8002b8a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	331b      	adds	r3, #27
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	0151      	lsls	r1, r2, #5
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	440a      	add	r2, r1
 8002a12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a1a:	6053      	str	r3, [r2, #4]
 8002a1c:	e0b5      	b.n	8002b8a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	334d      	adds	r3, #77	@ 0x4d
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d114      	bne.n	8002a5e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	334d      	adds	r3, #77	@ 0x4d
 8002a44:	2202      	movs	r2, #2
 8002a46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	334c      	adds	r3, #76	@ 0x4c
 8002a58:	2202      	movs	r2, #2
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	e095      	b.n	8002b8a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	334d      	adds	r3, #77	@ 0x4d
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d114      	bne.n	8002a9e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	334d      	adds	r3, #77	@ 0x4d
 8002a84:	2202      	movs	r2, #2
 8002a86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	334c      	adds	r3, #76	@ 0x4c
 8002a98:	2205      	movs	r2, #5
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e075      	b.n	8002b8a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	334d      	adds	r3, #77	@ 0x4d
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b07      	cmp	r3, #7
 8002ab2:	d00a      	beq.n	8002aca <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	334d      	adds	r3, #77	@ 0x4d
 8002ac4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ac6:	2b09      	cmp	r3, #9
 8002ac8:	d170      	bne.n	8002bac <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	334d      	adds	r3, #77	@ 0x4d
 8002ada:	2202      	movs	r2, #2
 8002adc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	3344      	adds	r3, #68	@ 0x44
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	1c59      	adds	r1, r3, #1
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4403      	add	r3, r0
 8002afe:	3344      	adds	r3, #68	@ 0x44
 8002b00:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3344      	adds	r3, #68	@ 0x44
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d914      	bls.n	8002b42 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3344      	adds	r3, #68	@ 0x44
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	334c      	adds	r3, #76	@ 0x4c
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b40:	e022      	b.n	8002b88 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	334c      	adds	r3, #76	@ 0x4c
 8002b52:	2202      	movs	r2, #2
 8002b54:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b6c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b74:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b82:	461a      	mov	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b88:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	334c      	adds	r3, #76	@ 0x4c
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f001 fc50 	bl	8004446 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ba6:	e002      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002ba8:	bf00      	nop
 8002baa:	e000      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8002bac:	bf00      	nop
  }
}
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	@ 0x28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	0c5b      	lsrs	r3, r3, #17
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002be8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d004      	beq.n	8002bfa <HCD_RXQLVL_IRQHandler+0x46>
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b05      	cmp	r3, #5
 8002bf4:	f000 80b6 	beq.w	8002d64 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002bf8:	e0b7      	b.n	8002d6a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80b3 	beq.w	8002d68 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4613      	mov	r3, r2
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	332c      	adds	r3, #44	@ 0x2c
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80a7 	beq.w	8002d68 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3338      	adds	r3, #56	@ 0x38
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	18d1      	adds	r1, r2, r3
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4613      	mov	r3, r2
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4403      	add	r3, r0
 8002c3e:	3334      	adds	r3, #52	@ 0x34
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4299      	cmp	r1, r3
 8002c44:	f200 8083 	bhi.w	8002d4e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	332c      	adds	r3, #44	@ 0x2c
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	b292      	uxth	r2, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	f001 f88c 	bl	8003d80 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	332c      	adds	r3, #44	@ 0x2c
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	18d1      	adds	r1, r2, r3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4403      	add	r3, r0
 8002c8c:	332c      	adds	r3, #44	@ 0x2c
 8002c8e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3338      	adds	r3, #56	@ 0x38
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	18d1      	adds	r1, r2, r3
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4403      	add	r3, r0
 8002cb4:	3338      	adds	r3, #56	@ 0x38
 8002cb6:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	0cdb      	lsrs	r3, r3, #19
 8002cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ccc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3328      	adds	r3, #40	@ 0x28
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d13f      	bne.n	8002d68 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d03c      	beq.n	8002d68 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d04:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d0c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4613      	mov	r3, r2
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	333c      	adds	r3, #60	@ 0x3c
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	f083 0301 	eor.w	r3, r3, #1
 8002d36:	b2d8      	uxtb	r0, r3
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	333c      	adds	r3, #60	@ 0x3c
 8002d48:	4602      	mov	r2, r0
 8002d4a:	701a      	strb	r2, [r3, #0]
      break;
 8002d4c:	e00c      	b.n	8002d68 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	334c      	adds	r3, #76	@ 0x4c
 8002d5e:	2204      	movs	r2, #4
 8002d60:	701a      	strb	r2, [r3, #0]
      break;
 8002d62:	e001      	b.n	8002d68 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002d64:	bf00      	nop
 8002d66:	e000      	b.n	8002d6a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002d68:	bf00      	nop
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	3728      	adds	r7, #40	@ 0x28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002d9e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d10b      	bne.n	8002dc2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d102      	bne.n	8002dba <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f001 fb2a 	bl	800440e <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d132      	bne.n	8002e32 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f043 0308 	orr.w	r3, r3, #8
 8002dd2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d126      	bne.n	8002e2c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7a5b      	ldrb	r3, [r3, #9]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d113      	bne.n	8002e0e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002dec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002df0:	d106      	bne.n	8002e00 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2102      	movs	r1, #2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f001 f85b 	bl	8003eb4 <USB_InitFSLSPClkSel>
 8002dfe:	e011      	b.n	8002e24 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2101      	movs	r1, #1
 8002e06:	4618      	mov	r0, r3
 8002e08:	f001 f854 	bl	8003eb4 <USB_InitFSLSPClkSel>
 8002e0c:	e00a      	b.n	8002e24 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	79db      	ldrb	r3, [r3, #7]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d106      	bne.n	8002e24 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002e22:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f001 fb1c 	bl	8004462 <HAL_HCD_PortEnabled_Callback>
 8002e2a:	e002      	b.n	8002e32 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f001 fb26 	bl	800447e <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d103      	bne.n	8002e44 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f043 0320 	orr.w	r3, r3, #32
 8002e42:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	bf00      	nop
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e267      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d075      	beq.n	8002f62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e76:	4b88      	ldr	r3, [pc, #544]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d00c      	beq.n	8002e9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e82:	4b85      	ldr	r3, [pc, #532]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d112      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8e:	4b82      	ldr	r3, [pc, #520]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e9a:	d10b      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9c:	4b7e      	ldr	r3, [pc, #504]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d05b      	beq.n	8002f60 <HAL_RCC_OscConfig+0x108>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d157      	bne.n	8002f60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e242      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ebc:	d106      	bne.n	8002ecc <HAL_RCC_OscConfig+0x74>
 8002ebe:	4b76      	ldr	r3, [pc, #472]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a75      	ldr	r2, [pc, #468]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e01d      	b.n	8002f08 <HAL_RCC_OscConfig+0xb0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x98>
 8002ed6:	4b70      	ldr	r3, [pc, #448]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6f      	ldr	r2, [pc, #444]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a6c      	ldr	r2, [pc, #432]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_OscConfig+0xb0>
 8002ef0:	4b69      	ldr	r3, [pc, #420]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a68      	ldr	r2, [pc, #416]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	4b66      	ldr	r3, [pc, #408]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a65      	ldr	r2, [pc, #404]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d013      	beq.n	8002f38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fd ff04 	bl	8000d1c <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f18:	f7fd ff00 	bl	8000d1c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	@ 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e207      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0xc0>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fd fef0 	bl	8000d1c <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f40:	f7fd feec 	bl	8000d1c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	@ 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e1f3      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	4b51      	ldr	r3, [pc, #324]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0xe8>
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d063      	beq.n	8003036 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7a:	4b47      	ldr	r3, [pc, #284]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d11c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f86:	4b44      	ldr	r3, [pc, #272]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d116      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	4b41      	ldr	r3, [pc, #260]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_RCC_OscConfig+0x152>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e1c7      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002faa:	4b3b      	ldr	r3, [pc, #236]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4937      	ldr	r1, [pc, #220]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	e03a      	b.n	8003036 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc8:	4b34      	ldr	r3, [pc, #208]	@ (800309c <HAL_RCC_OscConfig+0x244>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fce:	f7fd fea5 	bl	8000d1c <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd6:	f7fd fea1 	bl	8000d1c <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e1a8      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff4:	4b28      	ldr	r3, [pc, #160]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4925      	ldr	r1, [pc, #148]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]
 8003008:	e015      	b.n	8003036 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300a:	4b24      	ldr	r3, [pc, #144]	@ (800309c <HAL_RCC_OscConfig+0x244>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fd fe84 	bl	8000d1c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003018:	f7fd fe80 	bl	8000d1c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e187      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	4b1b      	ldr	r3, [pc, #108]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d036      	beq.n	80030b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304a:	4b15      	ldr	r3, [pc, #84]	@ (80030a0 <HAL_RCC_OscConfig+0x248>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7fd fe64 	bl	8000d1c <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003058:	f7fd fe60 	bl	8000d1c <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e167      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306a:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 800306c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x200>
 8003076:	e01b      	b.n	80030b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003078:	4b09      	ldr	r3, [pc, #36]	@ (80030a0 <HAL_RCC_OscConfig+0x248>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307e:	f7fd fe4d 	bl	8000d1c <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003084:	e00e      	b.n	80030a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003086:	f7fd fe49 	bl	8000d1c <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d907      	bls.n	80030a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e150      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
 8003098:	40023800 	.word	0x40023800
 800309c:	42470000 	.word	0x42470000
 80030a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a4:	4b88      	ldr	r3, [pc, #544]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1ea      	bne.n	8003086 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 8097 	beq.w	80031ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030be:	2300      	movs	r3, #0
 80030c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c2:	4b81      	ldr	r3, [pc, #516]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10f      	bne.n	80030ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	4b7d      	ldr	r3, [pc, #500]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	4a7c      	ldr	r2, [pc, #496]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030de:	4b7a      	ldr	r3, [pc, #488]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ea:	2301      	movs	r3, #1
 80030ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ee:	4b77      	ldr	r3, [pc, #476]	@ (80032cc <HAL_RCC_OscConfig+0x474>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d118      	bne.n	800312c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fa:	4b74      	ldr	r3, [pc, #464]	@ (80032cc <HAL_RCC_OscConfig+0x474>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a73      	ldr	r2, [pc, #460]	@ (80032cc <HAL_RCC_OscConfig+0x474>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003106:	f7fd fe09 	bl	8000d1c <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310e:	f7fd fe05 	bl	8000d1c <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e10c      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	4b6a      	ldr	r3, [pc, #424]	@ (80032cc <HAL_RCC_OscConfig+0x474>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d106      	bne.n	8003142 <HAL_RCC_OscConfig+0x2ea>
 8003134:	4b64      	ldr	r3, [pc, #400]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003138:	4a63      	ldr	r2, [pc, #396]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003140:	e01c      	b.n	800317c <HAL_RCC_OscConfig+0x324>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b05      	cmp	r3, #5
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x30c>
 800314a:	4b5f      	ldr	r3, [pc, #380]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314e:	4a5e      	ldr	r2, [pc, #376]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	6713      	str	r3, [r2, #112]	@ 0x70
 8003156:	4b5c      	ldr	r3, [pc, #368]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315a:	4a5b      	ldr	r2, [pc, #364]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6713      	str	r3, [r2, #112]	@ 0x70
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0x324>
 8003164:	4b58      	ldr	r3, [pc, #352]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003168:	4a57      	ldr	r2, [pc, #348]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 800316a:	f023 0301 	bic.w	r3, r3, #1
 800316e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003170:	4b55      	ldr	r3, [pc, #340]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003174:	4a54      	ldr	r2, [pc, #336]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003176:	f023 0304 	bic.w	r3, r3, #4
 800317a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d015      	beq.n	80031b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fd fdca 	bl	8000d1c <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7fd fdc6 	bl	8000d1c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e0cb      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	4b49      	ldr	r3, [pc, #292]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ee      	beq.n	800318c <HAL_RCC_OscConfig+0x334>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b0:	f7fd fdb4 	bl	8000d1c <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7fd fdb0 	bl	8000d1c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0b5      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ce:	4b3e      	ldr	r3, [pc, #248]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ee      	bne.n	80031b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d105      	bne.n	80031ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e0:	4b39      	ldr	r3, [pc, #228]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	4a38      	ldr	r2, [pc, #224]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80a1 	beq.w	8003338 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f6:	4b34      	ldr	r3, [pc, #208]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d05c      	beq.n	80032bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d141      	bne.n	800328e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320a:	4b31      	ldr	r3, [pc, #196]	@ (80032d0 <HAL_RCC_OscConfig+0x478>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fd fd84 	bl	8000d1c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003218:	f7fd fd80 	bl	8000d1c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e087      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322a:	4b27      	ldr	r3, [pc, #156]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	019b      	lsls	r3, r3, #6
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	3b01      	subs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	491b      	ldr	r1, [pc, #108]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003260:	4b1b      	ldr	r3, [pc, #108]	@ (80032d0 <HAL_RCC_OscConfig+0x478>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7fd fd59 	bl	8000d1c <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326e:	f7fd fd55 	bl	8000d1c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e05c      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003280:	4b11      	ldr	r3, [pc, #68]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x416>
 800328c:	e054      	b.n	8003338 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328e:	4b10      	ldr	r3, [pc, #64]	@ (80032d0 <HAL_RCC_OscConfig+0x478>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fd fd42 	bl	8000d1c <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329c:	f7fd fd3e 	bl	8000d1c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e045      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x444>
 80032ba:	e03d      	b.n	8003338 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e038      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40007000 	.word	0x40007000
 80032d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003344 <HAL_RCC_OscConfig+0x4ec>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d028      	beq.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d121      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d11a      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003304:	4013      	ands	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800330a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800330c:	4293      	cmp	r3, r2
 800330e:	d111      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	3b01      	subs	r3, #1
 800331e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d107      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800

08003348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0cc      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800335c:	4b68      	ldr	r3, [pc, #416]	@ (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d90c      	bls.n	8003384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	4b65      	ldr	r3, [pc, #404]	@ (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003372:	4b63      	ldr	r3, [pc, #396]	@ (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d001      	beq.n	8003384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0b8      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d020      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800339c:	4b59      	ldr	r3, [pc, #356]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4a58      	ldr	r2, [pc, #352]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b4:	4b53      	ldr	r3, [pc, #332]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a52      	ldr	r2, [pc, #328]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c0:	4b50      	ldr	r3, [pc, #320]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	494d      	ldr	r1, [pc, #308]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d044      	beq.n	8003468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	4b47      	ldr	r3, [pc, #284]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d119      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e07f      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d003      	beq.n	8003406 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003402:	2b03      	cmp	r3, #3
 8003404:	d107      	bne.n	8003416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003406:	4b3f      	ldr	r3, [pc, #252]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e06f      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003416:	4b3b      	ldr	r3, [pc, #236]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e067      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003426:	4b37      	ldr	r3, [pc, #220]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f023 0203 	bic.w	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	4934      	ldr	r1, [pc, #208]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003438:	f7fd fc70 	bl	8000d1c <HAL_GetTick>
 800343c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343e:	e00a      	b.n	8003456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003440:	f7fd fc6c 	bl	8000d1c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e04f      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003456:	4b2b      	ldr	r3, [pc, #172]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 020c 	and.w	r2, r3, #12
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	429a      	cmp	r2, r3
 8003466:	d1eb      	bne.n	8003440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003468:	4b25      	ldr	r3, [pc, #148]	@ (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d20c      	bcs.n	8003490 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b22      	ldr	r3, [pc, #136]	@ (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800347e:	4b20      	ldr	r3, [pc, #128]	@ (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e032      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800349c:	4b19      	ldr	r3, [pc, #100]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4916      	ldr	r1, [pc, #88]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ba:	4b12      	ldr	r3, [pc, #72]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	490e      	ldr	r1, [pc, #56]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ce:	f000 f821 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 80034d2:	4602      	mov	r2, r0
 80034d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	490a      	ldr	r1, [pc, #40]	@ (8003508 <HAL_RCC_ClockConfig+0x1c0>)
 80034e0:	5ccb      	ldrb	r3, [r1, r3]
 80034e2:	fa22 f303 	lsr.w	r3, r2, r3
 80034e6:	4a09      	ldr	r2, [pc, #36]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034ea:	4b09      	ldr	r3, [pc, #36]	@ (8003510 <HAL_RCC_ClockConfig+0x1c8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd fbd0 	bl	8000c94 <HAL_InitTick>

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40023c00 	.word	0x40023c00
 8003504:	40023800 	.word	0x40023800
 8003508:	08004598 	.word	0x08004598
 800350c:	20000030 	.word	0x20000030
 8003510:	20000034 	.word	0x20000034

08003514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003518:	b094      	sub	sp, #80	@ 0x50
 800351a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800352c:	4b79      	ldr	r3, [pc, #484]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x200>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b08      	cmp	r3, #8
 8003536:	d00d      	beq.n	8003554 <HAL_RCC_GetSysClockFreq+0x40>
 8003538:	2b08      	cmp	r3, #8
 800353a:	f200 80e1 	bhi.w	8003700 <HAL_RCC_GetSysClockFreq+0x1ec>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x34>
 8003542:	2b04      	cmp	r3, #4
 8003544:	d003      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0x3a>
 8003546:	e0db      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003548:	4b73      	ldr	r3, [pc, #460]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x204>)
 800354a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800354c:	e0db      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800354e:	4b73      	ldr	r3, [pc, #460]	@ (800371c <HAL_RCC_GetSysClockFreq+0x208>)
 8003550:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003552:	e0d8      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003554:	4b6f      	ldr	r3, [pc, #444]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x200>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800355c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800355e:	4b6d      	ldr	r3, [pc, #436]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x200>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d063      	beq.n	8003632 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800356a:	4b6a      	ldr	r3, [pc, #424]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x200>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	099b      	lsrs	r3, r3, #6
 8003570:	2200      	movs	r2, #0
 8003572:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003574:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357c:	633b      	str	r3, [r7, #48]	@ 0x30
 800357e:	2300      	movs	r3, #0
 8003580:	637b      	str	r3, [r7, #52]	@ 0x34
 8003582:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003586:	4622      	mov	r2, r4
 8003588:	462b      	mov	r3, r5
 800358a:	f04f 0000 	mov.w	r0, #0
 800358e:	f04f 0100 	mov.w	r1, #0
 8003592:	0159      	lsls	r1, r3, #5
 8003594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003598:	0150      	lsls	r0, r2, #5
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4621      	mov	r1, r4
 80035a0:	1a51      	subs	r1, r2, r1
 80035a2:	6139      	str	r1, [r7, #16]
 80035a4:	4629      	mov	r1, r5
 80035a6:	eb63 0301 	sbc.w	r3, r3, r1
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035b8:	4659      	mov	r1, fp
 80035ba:	018b      	lsls	r3, r1, #6
 80035bc:	4651      	mov	r1, sl
 80035be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035c2:	4651      	mov	r1, sl
 80035c4:	018a      	lsls	r2, r1, #6
 80035c6:	4651      	mov	r1, sl
 80035c8:	ebb2 0801 	subs.w	r8, r2, r1
 80035cc:	4659      	mov	r1, fp
 80035ce:	eb63 0901 	sbc.w	r9, r3, r1
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035e6:	4690      	mov	r8, r2
 80035e8:	4699      	mov	r9, r3
 80035ea:	4623      	mov	r3, r4
 80035ec:	eb18 0303 	adds.w	r3, r8, r3
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	462b      	mov	r3, r5
 80035f4:	eb49 0303 	adc.w	r3, r9, r3
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003606:	4629      	mov	r1, r5
 8003608:	024b      	lsls	r3, r1, #9
 800360a:	4621      	mov	r1, r4
 800360c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003610:	4621      	mov	r1, r4
 8003612:	024a      	lsls	r2, r1, #9
 8003614:	4610      	mov	r0, r2
 8003616:	4619      	mov	r1, r3
 8003618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800361a:	2200      	movs	r2, #0
 800361c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800361e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003620:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003624:	f7fc fdd0 	bl	80001c8 <__aeabi_uldivmod>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4613      	mov	r3, r2
 800362e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003630:	e058      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003632:	4b38      	ldr	r3, [pc, #224]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x200>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	099b      	lsrs	r3, r3, #6
 8003638:	2200      	movs	r2, #0
 800363a:	4618      	mov	r0, r3
 800363c:	4611      	mov	r1, r2
 800363e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003642:	623b      	str	r3, [r7, #32]
 8003644:	2300      	movs	r3, #0
 8003646:	627b      	str	r3, [r7, #36]	@ 0x24
 8003648:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800364c:	4642      	mov	r2, r8
 800364e:	464b      	mov	r3, r9
 8003650:	f04f 0000 	mov.w	r0, #0
 8003654:	f04f 0100 	mov.w	r1, #0
 8003658:	0159      	lsls	r1, r3, #5
 800365a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800365e:	0150      	lsls	r0, r2, #5
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4641      	mov	r1, r8
 8003666:	ebb2 0a01 	subs.w	sl, r2, r1
 800366a:	4649      	mov	r1, r9
 800366c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800367c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003680:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003684:	ebb2 040a 	subs.w	r4, r2, sl
 8003688:	eb63 050b 	sbc.w	r5, r3, fp
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	00eb      	lsls	r3, r5, #3
 8003696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800369a:	00e2      	lsls	r2, r4, #3
 800369c:	4614      	mov	r4, r2
 800369e:	461d      	mov	r5, r3
 80036a0:	4643      	mov	r3, r8
 80036a2:	18e3      	adds	r3, r4, r3
 80036a4:	603b      	str	r3, [r7, #0]
 80036a6:	464b      	mov	r3, r9
 80036a8:	eb45 0303 	adc.w	r3, r5, r3
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ba:	4629      	mov	r1, r5
 80036bc:	028b      	lsls	r3, r1, #10
 80036be:	4621      	mov	r1, r4
 80036c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036c4:	4621      	mov	r1, r4
 80036c6:	028a      	lsls	r2, r1, #10
 80036c8:	4610      	mov	r0, r2
 80036ca:	4619      	mov	r1, r3
 80036cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ce:	2200      	movs	r2, #0
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	61fa      	str	r2, [r7, #28]
 80036d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036d8:	f7fc fd76 	bl	80001c8 <__aeabi_uldivmod>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4613      	mov	r3, r2
 80036e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	3301      	adds	r3, #1
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80036f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036fe:	e002      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003700:	4b05      	ldr	r3, [pc, #20]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x204>)
 8003702:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003708:	4618      	mov	r0, r3
 800370a:	3750      	adds	r7, #80	@ 0x50
 800370c:	46bd      	mov	sp, r7
 800370e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800
 8003718:	00f42400 	.word	0x00f42400
 800371c:	007a1200 	.word	0x007a1200

08003720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e041      	b.n	80037b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd f9da 	bl	8000b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3304      	adds	r3, #4
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f000 f950 	bl	8003a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d020      	beq.n	8003822 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01b      	beq.n	8003822 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f06f 0202 	mvn.w	r2, #2
 80037f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f8dc 	bl	80039c6 <HAL_TIM_IC_CaptureCallback>
 800380e:	e005      	b.n	800381c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f8ce 	bl	80039b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f8df 	bl	80039da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d020      	beq.n	800386e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01b      	beq.n	800386e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f06f 0204 	mvn.w	r2, #4
 800383e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f8b6 	bl	80039c6 <HAL_TIM_IC_CaptureCallback>
 800385a:	e005      	b.n	8003868 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f8a8 	bl	80039b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f8b9 	bl	80039da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d020      	beq.n	80038ba <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d01b      	beq.n	80038ba <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f06f 0208 	mvn.w	r2, #8
 800388a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2204      	movs	r2, #4
 8003890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f890 	bl	80039c6 <HAL_TIM_IC_CaptureCallback>
 80038a6:	e005      	b.n	80038b4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f882 	bl	80039b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f893 	bl	80039da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d020      	beq.n	8003906 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01b      	beq.n	8003906 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f06f 0210 	mvn.w	r2, #16
 80038d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2208      	movs	r2, #8
 80038dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f86a 	bl	80039c6 <HAL_TIM_IC_CaptureCallback>
 80038f2:	e005      	b.n	8003900 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f85c 	bl	80039b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f86d 	bl	80039da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00c      	beq.n	800392a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f06f 0201 	mvn.w	r2, #1
 8003922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f83a 	bl	800399e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00c      	beq.n	800394e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f98d 	bl	8003c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00c      	beq.n	8003972 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800396a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f83e 	bl	80039ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00c      	beq.n	8003996 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f06f 0220 	mvn.w	r2, #32
 800398e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f95f 	bl	8003c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a46      	ldr	r2, [pc, #280]	@ (8003b30 <TIM_Base_SetConfig+0x12c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d013      	beq.n	8003a44 <TIM_Base_SetConfig+0x40>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a22:	d00f      	beq.n	8003a44 <TIM_Base_SetConfig+0x40>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a43      	ldr	r2, [pc, #268]	@ (8003b34 <TIM_Base_SetConfig+0x130>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00b      	beq.n	8003a44 <TIM_Base_SetConfig+0x40>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a42      	ldr	r2, [pc, #264]	@ (8003b38 <TIM_Base_SetConfig+0x134>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d007      	beq.n	8003a44 <TIM_Base_SetConfig+0x40>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a41      	ldr	r2, [pc, #260]	@ (8003b3c <TIM_Base_SetConfig+0x138>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d003      	beq.n	8003a44 <TIM_Base_SetConfig+0x40>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a40      	ldr	r2, [pc, #256]	@ (8003b40 <TIM_Base_SetConfig+0x13c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d108      	bne.n	8003a56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a35      	ldr	r2, [pc, #212]	@ (8003b30 <TIM_Base_SetConfig+0x12c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d02b      	beq.n	8003ab6 <TIM_Base_SetConfig+0xb2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a64:	d027      	beq.n	8003ab6 <TIM_Base_SetConfig+0xb2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a32      	ldr	r2, [pc, #200]	@ (8003b34 <TIM_Base_SetConfig+0x130>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d023      	beq.n	8003ab6 <TIM_Base_SetConfig+0xb2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a31      	ldr	r2, [pc, #196]	@ (8003b38 <TIM_Base_SetConfig+0x134>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01f      	beq.n	8003ab6 <TIM_Base_SetConfig+0xb2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a30      	ldr	r2, [pc, #192]	@ (8003b3c <TIM_Base_SetConfig+0x138>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01b      	beq.n	8003ab6 <TIM_Base_SetConfig+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a2f      	ldr	r2, [pc, #188]	@ (8003b40 <TIM_Base_SetConfig+0x13c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d017      	beq.n	8003ab6 <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a2e      	ldr	r2, [pc, #184]	@ (8003b44 <TIM_Base_SetConfig+0x140>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2d      	ldr	r2, [pc, #180]	@ (8003b48 <TIM_Base_SetConfig+0x144>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00f      	beq.n	8003ab6 <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2c      	ldr	r2, [pc, #176]	@ (8003b4c <TIM_Base_SetConfig+0x148>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00b      	beq.n	8003ab6 <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b50 <TIM_Base_SetConfig+0x14c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d007      	beq.n	8003ab6 <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8003b54 <TIM_Base_SetConfig+0x150>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d003      	beq.n	8003ab6 <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a29      	ldr	r2, [pc, #164]	@ (8003b58 <TIM_Base_SetConfig+0x154>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d108      	bne.n	8003ac8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a10      	ldr	r2, [pc, #64]	@ (8003b30 <TIM_Base_SetConfig+0x12c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_Base_SetConfig+0xf8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a12      	ldr	r2, [pc, #72]	@ (8003b40 <TIM_Base_SetConfig+0x13c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d103      	bne.n	8003b04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d105      	bne.n	8003b22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f023 0201 	bic.w	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	611a      	str	r2, [r3, #16]
  }
}
 8003b22:	bf00      	nop
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40010000 	.word	0x40010000
 8003b34:	40000400 	.word	0x40000400
 8003b38:	40000800 	.word	0x40000800
 8003b3c:	40000c00 	.word	0x40000c00
 8003b40:	40010400 	.word	0x40010400
 8003b44:	40014000 	.word	0x40014000
 8003b48:	40014400 	.word	0x40014400
 8003b4c:	40014800 	.word	0x40014800
 8003b50:	40001800 	.word	0x40001800
 8003b54:	40001c00 	.word	0x40001c00
 8003b58:	40002000 	.word	0x40002000

08003b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e05a      	b.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a21      	ldr	r2, [pc, #132]	@ (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d022      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc0:	d01d      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d018      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1a      	ldr	r2, [pc, #104]	@ (8003c44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00e      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a18      	ldr	r2, [pc, #96]	@ (8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d009      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a17      	ldr	r2, [pc, #92]	@ (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d004      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a15      	ldr	r2, [pc, #84]	@ (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d10c      	bne.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800
 8003c44:	40000c00 	.word	0x40000c00
 8003c48:	40010400 	.word	0x40010400
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	40001800 	.word	0x40001800

08003c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f043 0201 	orr.w	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f023 0201 	bic.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cda:	d901      	bls.n	8003ce0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e01b      	b.n	8003d18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	daf2      	bge.n	8003cce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	019b      	lsls	r3, r3, #6
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d04:	d901      	bls.n	8003d0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e006      	b.n	8003d18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d0f0      	beq.n	8003cf8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3301      	adds	r3, #1
 8003d34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d3c:	d901      	bls.n	8003d42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e018      	b.n	8003d74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	daf2      	bge.n	8003d30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2210      	movs	r2, #16
 8003d52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3301      	adds	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d60:	d901      	bls.n	8003d66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e006      	b.n	8003d74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d0f0      	beq.n	8003d54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b08b      	sub	sp, #44	@ 0x2c
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	089b      	lsrs	r3, r3, #2
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	623b      	str	r3, [r7, #32]
 8003daa:	e014      	b.n	8003dd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	601a      	str	r2, [r3, #0]
    pDest++;
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	3301      	adds	r3, #1
 8003dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	3301      	adds	r3, #1
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	623b      	str	r3, [r7, #32]
 8003dd6:	6a3a      	ldr	r2, [r7, #32]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d3e6      	bcc.n	8003dac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003dde:	8bfb      	ldrh	r3, [r7, #30]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01e      	beq.n	8003e22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dee:	461a      	mov	r2, r3
 8003df0:	f107 0310 	add.w	r3, r7, #16
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	701a      	strb	r2, [r3, #0]
      i++;
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8003e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e12:	3301      	adds	r3, #1
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003e16:	8bfb      	ldrh	r3, [r7, #30]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003e1c:	8bfb      	ldrh	r3, [r7, #30]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1ea      	bne.n	8003df8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	372c      	adds	r7, #44	@ 0x2c
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4013      	ands	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003e48:	68fb      	ldr	r3, [r7, #12]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8003e76:	78fb      	ldrb	r3, [r7, #3]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	4013      	ands	r3, r2
 8003e88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	68f9      	ldr	r1, [r7, #12]
 8003ee8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003eec:	4313      	orrs	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d107      	bne.n	8003f06 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003efc:	461a      	mov	r2, r3
 8003efe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8003f02:	6053      	str	r3, [r2, #4]
 8003f04:	e00c      	b.n	8003f20 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d107      	bne.n	8003f1c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f12:	461a      	mov	r2, r3
 8003f14:	f241 7370 	movw	r3, #6000	@ 0x1770
 8003f18:	6053      	str	r3, [r2, #4]
 8003f1a:	e001      	b.n	8003f20 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b085      	sub	sp, #20
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	b29b      	uxth	r3, r3
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b089      	sub	sp, #36	@ 0x24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	0c9b      	lsrs	r3, r3, #18
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	0fdb      	lsrs	r3, r3, #31
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	0fdb      	lsrs	r3, r3, #31
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d10d      	bne.n	8003fd2 <USB_HC_Halt+0x82>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <USB_HC_Halt+0x82>
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d002      	beq.n	8003fce <USB_HC_Halt+0x7e>
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d101      	bne.n	8003fd2 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e0d8      	b.n	8004184 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <USB_HC_Halt+0x8e>
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d173      	bne.n	80040c6 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ff8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ffc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d14a      	bne.n	80040a0 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d133      	bne.n	800407e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	0151      	lsls	r1, r2, #5
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	440a      	add	r2, r1
 800402c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004030:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004034:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	4413      	add	r3, r2
 800403e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	0151      	lsls	r1, r2, #5
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	440a      	add	r2, r1
 800404c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004050:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004054:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	3301      	adds	r3, #1
 800405a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004062:	d82e      	bhi.n	80040c2 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	4413      	add	r3, r2
 800406c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004076:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800407a:	d0ec      	beq.n	8004056 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800407c:	e081      	b.n	8004182 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	0151      	lsls	r1, r2, #5
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	440a      	add	r2, r1
 8004094:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004098:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800409c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800409e:	e070      	b.n	8004182 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	0151      	lsls	r1, r2, #5
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	440a      	add	r2, r1
 80040b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040be:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80040c0:	e05f      	b.n	8004182 <USB_HC_Halt+0x232>
            break;
 80040c2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80040c4:	e05d      	b.n	8004182 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040e4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d133      	bne.n	800415e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	0151      	lsls	r1, r2, #5
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	440a      	add	r2, r1
 800410c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004110:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004114:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	4413      	add	r3, r2
 800411e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	440a      	add	r2, r1
 800412c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004130:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004134:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	3301      	adds	r3, #1
 800413a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004142:	d81d      	bhi.n	8004180 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004156:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800415a:	d0ec      	beq.n	8004136 <USB_HC_Halt+0x1e6>
 800415c:	e011      	b.n	8004182 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	4413      	add	r3, r2
 8004166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	0151      	lsls	r1, r2, #5
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	440a      	add	r2, r1
 8004174:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004178:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	e000      	b.n	8004182 <USB_HC_Halt+0x232>
          break;
 8004180:	bf00      	nop
    }
  }

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3724      	adds	r7, #36	@ 0x24
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fd7a 	bl	8003c9e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041aa:	2110      	movs	r1, #16
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff fd87 	bl	8003cc0 <USB_FlushTxFifo>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff fdb1 	bl	8003d24 <USB_FlushRxFifo>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80041cc:	2300      	movs	r3, #0
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	e01f      	b.n	8004212 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80041e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	4413      	add	r3, r2
 8004202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004206:	461a      	mov	r2, r3
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	3301      	adds	r3, #1
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b0f      	cmp	r3, #15
 8004216:	d9dc      	bls.n	80041d2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004218:	2300      	movs	r3, #0
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	e034      	b.n	8004288 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	4413      	add	r3, r2
 8004226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004234:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800423c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004244:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	4413      	add	r3, r2
 800424e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004252:	461a      	mov	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	3301      	adds	r3, #1
 800425c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004264:	d80c      	bhi.n	8004280 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	4413      	add	r3, r2
 800426e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004278:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800427c:	d0ec      	beq.n	8004258 <USB_StopHost+0xc8>
 800427e:	e000      	b.n	8004282 <USB_StopHost+0xf2>
        break;
 8004280:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	3301      	adds	r3, #1
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b0f      	cmp	r3, #15
 800428c:	d9c7      	bls.n	800421e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004294:	461a      	mov	r2, r3
 8004296:	f04f 33ff 	mov.w	r3, #4294967295
 800429a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f04f 32ff 	mov.w	r2, #4294967295
 80042a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff fce9 	bl	8003c7c <USB_EnableGlobalInt>

  return ret;
 80042aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3720      	adds	r7, #32
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f804 	bl	80042d8 <USBH_HandleSof>
}
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b0b      	cmp	r3, #11
 80042e8:	d10a      	bne.n	8004300 <USBH_HandleSof+0x28>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	4798      	blx	r3
  }
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8004318:	bf00      	nop
}
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8004334:	bf00      	nop
}
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f883 	bl	800449a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	791b      	ldrb	r3, [r3, #4]
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f80b 	bl	80043b6 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	795b      	ldrb	r3, [r3, #5]
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f805 	bl	80043b6 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	460b      	mov	r3, r1
 80043c0:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	2b0f      	cmp	r3, #15
 80043c6:	d80d      	bhi.n	80043e4 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	33e0      	adds	r3, #224	@ 0xe0
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	33e0      	adds	r3, #224	@ 0xe0
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff ff57 	bl	80042b4 <USBH_LL_IncTimer>
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff ff8f 	bl	8004340 <USBH_LL_Connect>
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff98 	bl	800436e <USBH_LL_Disconnect>
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	70fb      	strb	r3, [r7, #3]
 8004452:	4613      	mov	r3, r2
 8004454:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff ff49 	bl	8004308 <USBH_LL_PortEnabled>
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff ff49 	bl	8004324 <USBH_LL_PortDisabled>
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fd f83a 	bl	800152a <HAL_HCD_Stop>
 80044b6:	4603      	mov	r3, r0
 80044b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 f807 	bl	80044d0 <USBH_Get_USB_Status>
 80044c2:	4603      	mov	r3, r0
 80044c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80044c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80044de:	79fb      	ldrb	r3, [r7, #7]
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d817      	bhi.n	8004514 <USBH_Get_USB_Status+0x44>
 80044e4:	a201      	add	r2, pc, #4	@ (adr r2, 80044ec <USBH_Get_USB_Status+0x1c>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	080044fd 	.word	0x080044fd
 80044f0:	08004503 	.word	0x08004503
 80044f4:	08004509 	.word	0x08004509
 80044f8:	0800450f 	.word	0x0800450f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	73fb      	strb	r3, [r7, #15]
    break;
 8004500:	e00b      	b.n	800451a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004502:	2302      	movs	r3, #2
 8004504:	73fb      	strb	r3, [r7, #15]
    break;
 8004506:	e008      	b.n	800451a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
    break;
 800450c:	e005      	b.n	800451a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800450e:	2302      	movs	r3, #2
 8004510:	73fb      	strb	r3, [r7, #15]
    break;
 8004512:	e002      	b.n	800451a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004514:	2302      	movs	r3, #2
 8004516:	73fb      	strb	r3, [r7, #15]
    break;
 8004518:	bf00      	nop
  }
  return usb_status;
 800451a:	7bfb      	ldrb	r3, [r7, #15]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <memset>:
 8004528:	4402      	add	r2, r0
 800452a:	4603      	mov	r3, r0
 800452c:	4293      	cmp	r3, r2
 800452e:	d100      	bne.n	8004532 <memset+0xa>
 8004530:	4770      	bx	lr
 8004532:	f803 1b01 	strb.w	r1, [r3], #1
 8004536:	e7f9      	b.n	800452c <memset+0x4>

08004538 <__libc_init_array>:
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	4d0d      	ldr	r5, [pc, #52]	@ (8004570 <__libc_init_array+0x38>)
 800453c:	4c0d      	ldr	r4, [pc, #52]	@ (8004574 <__libc_init_array+0x3c>)
 800453e:	1b64      	subs	r4, r4, r5
 8004540:	10a4      	asrs	r4, r4, #2
 8004542:	2600      	movs	r6, #0
 8004544:	42a6      	cmp	r6, r4
 8004546:	d109      	bne.n	800455c <__libc_init_array+0x24>
 8004548:	4d0b      	ldr	r5, [pc, #44]	@ (8004578 <__libc_init_array+0x40>)
 800454a:	4c0c      	ldr	r4, [pc, #48]	@ (800457c <__libc_init_array+0x44>)
 800454c:	f000 f818 	bl	8004580 <_init>
 8004550:	1b64      	subs	r4, r4, r5
 8004552:	10a4      	asrs	r4, r4, #2
 8004554:	2600      	movs	r6, #0
 8004556:	42a6      	cmp	r6, r4
 8004558:	d105      	bne.n	8004566 <__libc_init_array+0x2e>
 800455a:	bd70      	pop	{r4, r5, r6, pc}
 800455c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004560:	4798      	blx	r3
 8004562:	3601      	adds	r6, #1
 8004564:	e7ee      	b.n	8004544 <__libc_init_array+0xc>
 8004566:	f855 3b04 	ldr.w	r3, [r5], #4
 800456a:	4798      	blx	r3
 800456c:	3601      	adds	r6, #1
 800456e:	e7f2      	b.n	8004556 <__libc_init_array+0x1e>
 8004570:	080045b0 	.word	0x080045b0
 8004574:	080045b0 	.word	0x080045b0
 8004578:	080045b0 	.word	0x080045b0
 800457c:	080045b4 	.word	0x080045b4

08004580 <_init>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	bf00      	nop
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr

0800458c <_fini>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	bf00      	nop
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr
